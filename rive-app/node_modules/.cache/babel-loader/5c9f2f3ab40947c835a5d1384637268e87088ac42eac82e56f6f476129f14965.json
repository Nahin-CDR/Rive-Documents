{"ast":null,"code":"var Rive = function () {\n  var _scriptDir = typeof document !== 'undefined' && document.currentScript ? document.currentScript.src : undefined;\n  if (typeof __filename !== 'undefined') _scriptDir = _scriptDir || __filename;\n  return function (Rive) {\n    Rive = Rive || {};\n    null;\n    var Module = typeof Rive !== \"undefined\" ? Rive : {};\n    var readyPromiseResolve, readyPromiseReject;\n    Module[\"ready\"] = new Promise(function (resolve, reject) {\n      readyPromiseResolve = resolve;\n      readyPromiseReject = reject;\n    });\n    var moduleOverrides = {};\n    var key;\n    for (key in Module) {\n      if (Module.hasOwnProperty(key)) {\n        moduleOverrides[key] = Module[key];\n      }\n    }\n    var arguments_ = [];\n    var thisProgram = \"./this.program\";\n    var quit_ = function (status, toThrow) {\n      throw toThrow;\n    };\n    var ENVIRONMENT_IS_WEB = false;\n    var ENVIRONMENT_IS_WORKER = false;\n    var ENVIRONMENT_IS_NODE = false;\n    var ENVIRONMENT_IS_SHELL = false;\n    ENVIRONMENT_IS_WEB = typeof window === \"object\";\n    ENVIRONMENT_IS_WORKER = typeof importScripts === \"function\";\n    ENVIRONMENT_IS_NODE = typeof process === \"object\" && typeof process.versions === \"object\" && typeof process.versions.node === \"string\";\n    ENVIRONMENT_IS_SHELL = !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_WORKER;\n    var scriptDirectory = \"\";\n    function locateFile(path) {\n      if (Module[\"locateFile\"]) {\n        return Module[\"locateFile\"](path, scriptDirectory);\n      }\n      return scriptDirectory + path;\n    }\n    var read_, readAsync, readBinary, setWindowTitle;\n    var nodeFS;\n    var nodePath;\n    if (ENVIRONMENT_IS_NODE) {\n      if (ENVIRONMENT_IS_WORKER) {\n        scriptDirectory = require(\"path\").dirname(scriptDirectory) + \"/\";\n      } else {\n        scriptDirectory = __dirname + \"/\";\n      }\n      read_ = function shell_read(filename, binary) {\n        var ret = tryParseAsDataURI(filename);\n        if (ret) {\n          return binary ? ret : ret.toString();\n        }\n        if (!nodeFS) nodeFS = require(\"fs\");\n        if (!nodePath) nodePath = require(\"path\");\n        filename = nodePath[\"normalize\"](filename);\n        return nodeFS[\"readFileSync\"](filename, binary ? null : \"utf8\");\n      };\n      readBinary = function readBinary(filename) {\n        var ret = read_(filename, true);\n        if (!ret.buffer) {\n          ret = new Uint8Array(ret);\n        }\n        assert(ret.buffer);\n        return ret;\n      };\n      if (process[\"argv\"].length > 1) {\n        thisProgram = process[\"argv\"][1].replace(/\\\\/g, \"/\");\n      }\n      arguments_ = process[\"argv\"].slice(2);\n      process[\"on\"](\"uncaughtException\", function (ex) {\n        if (!(ex instanceof ExitStatus)) {\n          throw ex;\n        }\n      });\n      process[\"on\"](\"unhandledRejection\", abort);\n      quit_ = function (status) {\n        process[\"exit\"](status);\n      };\n      Module[\"inspect\"] = function () {\n        return \"[Emscripten Module object]\";\n      };\n    } else if (ENVIRONMENT_IS_SHELL) {\n      if (typeof read != \"undefined\") {\n        read_ = function shell_read(f) {\n          var data = tryParseAsDataURI(f);\n          if (data) {\n            return intArrayToString(data);\n          }\n          return read(f);\n        };\n      }\n      readBinary = function readBinary(f) {\n        var data;\n        data = tryParseAsDataURI(f);\n        if (data) {\n          return data;\n        }\n        if (typeof readbuffer === \"function\") {\n          return new Uint8Array(readbuffer(f));\n        }\n        data = read(f, \"binary\");\n        assert(typeof data === \"object\");\n        return data;\n      };\n      if (typeof scriptArgs != \"undefined\") {\n        arguments_ = scriptArgs;\n      } else if (typeof arguments != \"undefined\") {\n        arguments_ = arguments;\n      }\n      if (typeof quit === \"function\") {\n        quit_ = function (status) {\n          quit(status);\n        };\n      }\n      if (typeof print !== \"undefined\") {\n        if (typeof console === \"undefined\") console = {};\n        console.log = print;\n        console.warn = console.error = typeof printErr !== \"undefined\" ? printErr : print;\n      }\n    } else if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {\n      if (ENVIRONMENT_IS_WORKER) {\n        scriptDirectory = self.location.href;\n      } else if (typeof document !== \"undefined\" && document.currentScript) {\n        scriptDirectory = document.currentScript.src;\n      }\n      if (_scriptDir) {\n        scriptDirectory = _scriptDir;\n      }\n      if (scriptDirectory.indexOf(\"blob:\") !== 0) {\n        scriptDirectory = scriptDirectory.substr(0, scriptDirectory.lastIndexOf(\"/\") + 1);\n      } else {\n        scriptDirectory = \"\";\n      }\n      {\n        read_ = function (url) {\n          try {\n            var xhr = new XMLHttpRequest();\n            xhr.open(\"GET\", url, false);\n            xhr.send(null);\n            return xhr.responseText;\n          } catch (err) {\n            var data = tryParseAsDataURI(url);\n            if (data) {\n              return intArrayToString(data);\n            }\n            throw err;\n          }\n        };\n        if (ENVIRONMENT_IS_WORKER) {\n          readBinary = function (url) {\n            try {\n              var xhr = new XMLHttpRequest();\n              xhr.open(\"GET\", url, false);\n              xhr.responseType = \"arraybuffer\";\n              xhr.send(null);\n              return new Uint8Array(xhr.response);\n            } catch (err) {\n              var data = tryParseAsDataURI(url);\n              if (data) {\n                return data;\n              }\n              throw err;\n            }\n          };\n        }\n        readAsync = function (url, onload, onerror) {\n          var xhr = new XMLHttpRequest();\n          xhr.open(\"GET\", url, true);\n          xhr.responseType = \"arraybuffer\";\n          xhr.onload = function () {\n            if (xhr.status == 200 || xhr.status == 0 && xhr.response) {\n              onload(xhr.response);\n              return;\n            }\n            var data = tryParseAsDataURI(url);\n            if (data) {\n              onload(data.buffer);\n              return;\n            }\n            onerror();\n          };\n          xhr.onerror = onerror;\n          xhr.send(null);\n        };\n      }\n      setWindowTitle = function (title) {\n        document.title = title;\n      };\n    } else {}\n    var out = Module[\"print\"] || console.log.bind(console);\n    var err = Module[\"printErr\"] || console.warn.bind(console);\n    for (key in moduleOverrides) {\n      if (moduleOverrides.hasOwnProperty(key)) {\n        Module[key] = moduleOverrides[key];\n      }\n    }\n    moduleOverrides = null;\n    if (Module[\"arguments\"]) arguments_ = Module[\"arguments\"];\n    if (Module[\"thisProgram\"]) thisProgram = Module[\"thisProgram\"];\n    if (Module[\"quit\"]) quit_ = Module[\"quit\"];\n    var tempRet0 = 0;\n    var setTempRet0 = function (value) {\n      tempRet0 = value;\n    };\n    var wasmBinary;\n    if (Module[\"wasmBinary\"]) wasmBinary = Module[\"wasmBinary\"];\n    var noExitRuntime = Module[\"noExitRuntime\"] || true;\n    if (typeof WebAssembly !== \"object\") {\n      abort(\"no native wasm support detected\");\n    }\n    var wasmMemory;\n    var ABORT = false;\n    var EXITSTATUS;\n    function assert(condition, text) {\n      if (!condition) {\n        abort(\"Assertion failed: \" + text);\n      }\n    }\n    var UTF8Decoder = typeof TextDecoder !== \"undefined\" ? new TextDecoder(\"utf8\") : undefined;\n    function UTF8ArrayToString(heap, idx, maxBytesToRead) {\n      var endIdx = idx + maxBytesToRead;\n      var endPtr = idx;\n      while (heap[endPtr] && !(endPtr >= endIdx)) ++endPtr;\n      if (endPtr - idx > 16 && heap.subarray && UTF8Decoder) {\n        return UTF8Decoder.decode(heap.subarray(idx, endPtr));\n      } else {\n        var str = \"\";\n        while (idx < endPtr) {\n          var u0 = heap[idx++];\n          if (!(u0 & 128)) {\n            str += String.fromCharCode(u0);\n            continue;\n          }\n          var u1 = heap[idx++] & 63;\n          if ((u0 & 224) == 192) {\n            str += String.fromCharCode((u0 & 31) << 6 | u1);\n            continue;\n          }\n          var u2 = heap[idx++] & 63;\n          if ((u0 & 240) == 224) {\n            u0 = (u0 & 15) << 12 | u1 << 6 | u2;\n          } else {\n            u0 = (u0 & 7) << 18 | u1 << 12 | u2 << 6 | heap[idx++] & 63;\n          }\n          if (u0 < 65536) {\n            str += String.fromCharCode(u0);\n          } else {\n            var ch = u0 - 65536;\n            str += String.fromCharCode(55296 | ch >> 10, 56320 | ch & 1023);\n          }\n        }\n      }\n      return str;\n    }\n    function UTF8ToString(ptr, maxBytesToRead) {\n      return ptr ? UTF8ArrayToString(HEAPU8, ptr, maxBytesToRead) : \"\";\n    }\n    function stringToUTF8Array(str, heap, outIdx, maxBytesToWrite) {\n      if (!(maxBytesToWrite > 0)) return 0;\n      var startIdx = outIdx;\n      var endIdx = outIdx + maxBytesToWrite - 1;\n      for (var i = 0; i < str.length; ++i) {\n        var u = str.charCodeAt(i);\n        if (u >= 55296 && u <= 57343) {\n          var u1 = str.charCodeAt(++i);\n          u = 65536 + ((u & 1023) << 10) | u1 & 1023;\n        }\n        if (u <= 127) {\n          if (outIdx >= endIdx) break;\n          heap[outIdx++] = u;\n        } else if (u <= 2047) {\n          if (outIdx + 1 >= endIdx) break;\n          heap[outIdx++] = 192 | u >> 6;\n          heap[outIdx++] = 128 | u & 63;\n        } else if (u <= 65535) {\n          if (outIdx + 2 >= endIdx) break;\n          heap[outIdx++] = 224 | u >> 12;\n          heap[outIdx++] = 128 | u >> 6 & 63;\n          heap[outIdx++] = 128 | u & 63;\n        } else {\n          if (outIdx + 3 >= endIdx) break;\n          heap[outIdx++] = 240 | u >> 18;\n          heap[outIdx++] = 128 | u >> 12 & 63;\n          heap[outIdx++] = 128 | u >> 6 & 63;\n          heap[outIdx++] = 128 | u & 63;\n        }\n      }\n      heap[outIdx] = 0;\n      return outIdx - startIdx;\n    }\n    function stringToUTF8(str, outPtr, maxBytesToWrite) {\n      return stringToUTF8Array(str, HEAPU8, outPtr, maxBytesToWrite);\n    }\n    function lengthBytesUTF8(str) {\n      var len = 0;\n      for (var i = 0; i < str.length; ++i) {\n        var u = str.charCodeAt(i);\n        if (u >= 55296 && u <= 57343) u = 65536 + ((u & 1023) << 10) | str.charCodeAt(++i) & 1023;\n        if (u <= 127) ++len;else if (u <= 2047) len += 2;else if (u <= 65535) len += 3;else len += 4;\n      }\n      return len;\n    }\n    var UTF16Decoder = typeof TextDecoder !== \"undefined\" ? new TextDecoder(\"utf-16le\") : undefined;\n    function UTF16ToString(ptr, maxBytesToRead) {\n      var endPtr = ptr;\n      var idx = endPtr >> 1;\n      var maxIdx = idx + maxBytesToRead / 2;\n      while (!(idx >= maxIdx) && HEAPU16[idx]) ++idx;\n      endPtr = idx << 1;\n      if (endPtr - ptr > 32 && UTF16Decoder) {\n        return UTF16Decoder.decode(HEAPU8.subarray(ptr, endPtr));\n      } else {\n        var str = \"\";\n        for (var i = 0; !(i >= maxBytesToRead / 2); ++i) {\n          var codeUnit = HEAP16[ptr + i * 2 >> 1];\n          if (codeUnit == 0) break;\n          str += String.fromCharCode(codeUnit);\n        }\n        return str;\n      }\n    }\n    function stringToUTF16(str, outPtr, maxBytesToWrite) {\n      if (maxBytesToWrite === undefined) {\n        maxBytesToWrite = 2147483647;\n      }\n      if (maxBytesToWrite < 2) return 0;\n      maxBytesToWrite -= 2;\n      var startPtr = outPtr;\n      var numCharsToWrite = maxBytesToWrite < str.length * 2 ? maxBytesToWrite / 2 : str.length;\n      for (var i = 0; i < numCharsToWrite; ++i) {\n        var codeUnit = str.charCodeAt(i);\n        HEAP16[outPtr >> 1] = codeUnit;\n        outPtr += 2;\n      }\n      HEAP16[outPtr >> 1] = 0;\n      return outPtr - startPtr;\n    }\n    function lengthBytesUTF16(str) {\n      return str.length * 2;\n    }\n    function UTF32ToString(ptr, maxBytesToRead) {\n      var i = 0;\n      var str = \"\";\n      while (!(i >= maxBytesToRead / 4)) {\n        var utf32 = HEAP32[ptr + i * 4 >> 2];\n        if (utf32 == 0) break;\n        ++i;\n        if (utf32 >= 65536) {\n          var ch = utf32 - 65536;\n          str += String.fromCharCode(55296 | ch >> 10, 56320 | ch & 1023);\n        } else {\n          str += String.fromCharCode(utf32);\n        }\n      }\n      return str;\n    }\n    function stringToUTF32(str, outPtr, maxBytesToWrite) {\n      if (maxBytesToWrite === undefined) {\n        maxBytesToWrite = 2147483647;\n      }\n      if (maxBytesToWrite < 4) return 0;\n      var startPtr = outPtr;\n      var endPtr = startPtr + maxBytesToWrite - 4;\n      for (var i = 0; i < str.length; ++i) {\n        var codeUnit = str.charCodeAt(i);\n        if (codeUnit >= 55296 && codeUnit <= 57343) {\n          var trailSurrogate = str.charCodeAt(++i);\n          codeUnit = 65536 + ((codeUnit & 1023) << 10) | trailSurrogate & 1023;\n        }\n        HEAP32[outPtr >> 2] = codeUnit;\n        outPtr += 4;\n        if (outPtr + 4 > endPtr) break;\n      }\n      HEAP32[outPtr >> 2] = 0;\n      return outPtr - startPtr;\n    }\n    function lengthBytesUTF32(str) {\n      var len = 0;\n      for (var i = 0; i < str.length; ++i) {\n        var codeUnit = str.charCodeAt(i);\n        if (codeUnit >= 55296 && codeUnit <= 57343) ++i;\n        len += 4;\n      }\n      return len;\n    }\n    function alignUp(x, multiple) {\n      if (x % multiple > 0) {\n        x += multiple - x % multiple;\n      }\n      return x;\n    }\n    var buffer, HEAP8, HEAPU8, HEAP16, HEAPU16, HEAP32, HEAPU32, HEAPF32, HEAPF64;\n    function updateGlobalBufferAndViews(buf) {\n      buffer = buf;\n      Module[\"HEAP8\"] = HEAP8 = new Int8Array(buf);\n      Module[\"HEAP16\"] = HEAP16 = new Int16Array(buf);\n      Module[\"HEAP32\"] = HEAP32 = new Int32Array(buf);\n      Module[\"HEAPU8\"] = HEAPU8 = new Uint8Array(buf);\n      Module[\"HEAPU16\"] = HEAPU16 = new Uint16Array(buf);\n      Module[\"HEAPU32\"] = HEAPU32 = new Uint32Array(buf);\n      Module[\"HEAPF32\"] = HEAPF32 = new Float32Array(buf);\n      Module[\"HEAPF64\"] = HEAPF64 = new Float64Array(buf);\n    }\n    var INITIAL_MEMORY = Module[\"INITIAL_MEMORY\"] || 16777216;\n    var wasmTable;\n    var __ATPRERUN__ = [];\n    var __ATINIT__ = [];\n    var __ATMAIN__ = [];\n    var __ATPOSTRUN__ = [];\n    var runtimeInitialized = false;\n    function preRun() {\n      if (Module[\"preRun\"]) {\n        if (typeof Module[\"preRun\"] == \"function\") Module[\"preRun\"] = [Module[\"preRun\"]];\n        while (Module[\"preRun\"].length) {\n          addOnPreRun(Module[\"preRun\"].shift());\n        }\n      }\n      callRuntimeCallbacks(__ATPRERUN__);\n    }\n    function initRuntime() {\n      runtimeInitialized = true;\n      callRuntimeCallbacks(__ATINIT__);\n    }\n    function preMain() {\n      callRuntimeCallbacks(__ATMAIN__);\n    }\n    function postRun() {\n      if (Module[\"postRun\"]) {\n        if (typeof Module[\"postRun\"] == \"function\") Module[\"postRun\"] = [Module[\"postRun\"]];\n        while (Module[\"postRun\"].length) {\n          addOnPostRun(Module[\"postRun\"].shift());\n        }\n      }\n      callRuntimeCallbacks(__ATPOSTRUN__);\n    }\n    function addOnPreRun(cb) {\n      __ATPRERUN__.unshift(cb);\n    }\n    function addOnInit(cb) {\n      __ATINIT__.unshift(cb);\n    }\n    function addOnPostRun(cb) {\n      __ATPOSTRUN__.unshift(cb);\n    }\n    var runDependencies = 0;\n    var runDependencyWatcher = null;\n    var dependenciesFulfilled = null;\n    function addRunDependency(id) {\n      runDependencies++;\n      if (Module[\"monitorRunDependencies\"]) {\n        Module[\"monitorRunDependencies\"](runDependencies);\n      }\n    }\n    function removeRunDependency(id) {\n      runDependencies--;\n      if (Module[\"monitorRunDependencies\"]) {\n        Module[\"monitorRunDependencies\"](runDependencies);\n      }\n      if (runDependencies == 0) {\n        if (runDependencyWatcher !== null) {\n          clearInterval(runDependencyWatcher);\n          runDependencyWatcher = null;\n        }\n        if (dependenciesFulfilled) {\n          var callback = dependenciesFulfilled;\n          dependenciesFulfilled = null;\n          callback();\n        }\n      }\n    }\n    Module[\"preloadedImages\"] = {};\n    Module[\"preloadedAudios\"] = {};\n    function abort(what) {\n      if (Module[\"onAbort\"]) {\n        Module[\"onAbort\"](what);\n      }\n      what += \"\";\n      err(what);\n      ABORT = true;\n      EXITSTATUS = 1;\n      what = \"abort(\" + what + \"). Build with -s ASSERTIONS=1 for more info.\";\n      var e = new WebAssembly.RuntimeError(what);\n      readyPromiseReject(e);\n      throw e;\n    }\n    function hasPrefix(str, prefix) {\n      return String.prototype.startsWith ? str.startsWith(prefix) : str.indexOf(prefix) === 0;\n    }\n    var dataURIPrefix = \"data:application/octet-stream;base64,\";\n    function isDataURI(filename) {\n      return hasPrefix(filename, dataURIPrefix);\n    }\n    var fileURIPrefix = \"file://\";\n    function isFileURI(filename) {\n      return hasPrefix(filename, fileURIPrefix);\n    }\n    var wasmBinaryFile = \"data:application/octet-stream;base64,\";\n    if (!isDataURI(wasmBinaryFile)) {\n      wasmBinaryFile = locateFile(wasmBinaryFile);\n    }\n    function getBinary(file) {\n      try {\n        if (file == wasmBinaryFile && wasmBinary) {\n          return new Uint8Array(wasmBinary);\n        }\n        var binary = tryParseAsDataURI(file);\n        if (binary) {\n          return binary;\n        }\n        if (readBinary) {\n          return readBinary(file);\n        } else {\n          throw \"both async and sync fetching of the wasm failed\";\n        }\n      } catch (err) {\n        abort(err);\n      }\n    }\n    function getBinaryPromise() {\n      if (!wasmBinary && (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER)) {\n        if (typeof fetch === \"function\" && !isFileURI(wasmBinaryFile)) {\n          return fetch(wasmBinaryFile, {\n            credentials: \"same-origin\"\n          }).then(function (response) {\n            if (!response[\"ok\"]) {\n              throw \"failed to load wasm binary file at '\" + wasmBinaryFile + \"'\";\n            }\n            return response[\"arrayBuffer\"]();\n          }).catch(function () {\n            return getBinary(wasmBinaryFile);\n          });\n        } else {\n          if (readAsync) {\n            return new Promise(function (resolve, reject) {\n              readAsync(wasmBinaryFile, function (response) {\n                resolve(new Uint8Array(response));\n              }, reject);\n            });\n          }\n        }\n      }\n      return Promise.resolve().then(function () {\n        return getBinary(wasmBinaryFile);\n      });\n    }\n    function createWasm() {\n      var info = {\n        \"a\": asmLibraryArg\n      };\n      function receiveInstance(instance, module) {\n        var exports = instance.exports;\n        Module[\"asm\"] = exports;\n        wasmMemory = Module[\"asm\"][\"M\"];\n        updateGlobalBufferAndViews(wasmMemory.buffer);\n        wasmTable = Module[\"asm\"][\"O\"];\n        addOnInit(Module[\"asm\"][\"N\"]);\n        removeRunDependency(\"wasm-instantiate\");\n      }\n      addRunDependency(\"wasm-instantiate\");\n      function receiveInstantiatedSource(output) {\n        receiveInstance(output[\"instance\"]);\n      }\n      function instantiateArrayBuffer(receiver) {\n        return getBinaryPromise().then(function (binary) {\n          var result = WebAssembly.instantiate(binary, info);\n          return result;\n        }).then(receiver, function (reason) {\n          err(\"failed to asynchronously prepare wasm: \" + reason);\n          abort(reason);\n        });\n      }\n      function instantiateAsync() {\n        if (!wasmBinary && typeof WebAssembly.instantiateStreaming === \"function\" && !isDataURI(wasmBinaryFile) && !isFileURI(wasmBinaryFile) && typeof fetch === \"function\") {\n          return fetch(wasmBinaryFile, {\n            credentials: \"same-origin\"\n          }).then(function (response) {\n            var result = WebAssembly.instantiateStreaming(response, info);\n            return result.then(receiveInstantiatedSource, function (reason) {\n              err(\"wasm streaming compile failed: \" + reason);\n              err(\"falling back to ArrayBuffer instantiation\");\n              return instantiateArrayBuffer(receiveInstantiatedSource);\n            });\n          });\n        } else {\n          return instantiateArrayBuffer(receiveInstantiatedSource);\n        }\n      }\n      if (Module[\"instantiateWasm\"]) {\n        try {\n          var exports = Module[\"instantiateWasm\"](info, receiveInstance);\n          return exports;\n        } catch (e) {\n          err(\"Module.instantiateWasm callback failed with error: \" + e);\n          return false;\n        }\n      }\n      instantiateAsync().catch(readyPromiseReject);\n      return {};\n    }\n    function callRuntimeCallbacks(callbacks) {\n      while (callbacks.length > 0) {\n        var callback = callbacks.shift();\n        if (typeof callback == \"function\") {\n          callback(Module);\n          continue;\n        }\n        var func = callback.func;\n        if (typeof func === \"number\") {\n          if (callback.arg === undefined) {\n            wasmTable.get(func)();\n          } else {\n            wasmTable.get(func)(callback.arg);\n          }\n        } else {\n          func(callback.arg === undefined ? null : callback.arg);\n        }\n      }\n    }\n    var char_0 = 48;\n    var char_9 = 57;\n    function makeLegalFunctionName(name) {\n      if (undefined === name) {\n        return \"_unknown\";\n      }\n      name = name.replace(/[^a-zA-Z0-9_]/g, \"$\");\n      var f = name.charCodeAt(0);\n      if (f >= char_0 && f <= char_9) {\n        return \"_\" + name;\n      } else {\n        return name;\n      }\n    }\n    function createNamedFunction(name, body) {\n      name = makeLegalFunctionName(name);\n      return new Function(\"body\", \"return function \" + name + \"() {\\n\" + '    \"use strict\";' + \"    return body.apply(this, arguments);\\n\" + \"};\\n\")(body);\n    }\n    var emval_free_list = [];\n    var emval_handle_array = [{}, {\n      value: undefined\n    }, {\n      value: null\n    }, {\n      value: true\n    }, {\n      value: false\n    }];\n    function count_emval_handles() {\n      var count = 0;\n      for (var i = 5; i < emval_handle_array.length; ++i) {\n        if (emval_handle_array[i] !== undefined) {\n          ++count;\n        }\n      }\n      return count;\n    }\n    function get_first_emval() {\n      for (var i = 5; i < emval_handle_array.length; ++i) {\n        if (emval_handle_array[i] !== undefined) {\n          return emval_handle_array[i];\n        }\n      }\n      return null;\n    }\n    function init_emval() {\n      Module[\"count_emval_handles\"] = count_emval_handles;\n      Module[\"get_first_emval\"] = get_first_emval;\n    }\n    function __emval_register(value) {\n      switch (value) {\n        case undefined:\n          {\n            return 1;\n          }\n        case null:\n          {\n            return 2;\n          }\n        case true:\n          {\n            return 3;\n          }\n        case false:\n          {\n            return 4;\n          }\n        default:\n          {\n            var handle = emval_free_list.length ? emval_free_list.pop() : emval_handle_array.length;\n            emval_handle_array[handle] = {\n              refcount: 1,\n              value: value\n            };\n            return handle;\n          }\n      }\n    }\n    function extendError(baseErrorType, errorName) {\n      var errorClass = createNamedFunction(errorName, function (message) {\n        this.name = errorName;\n        this.message = message;\n        var stack = new Error(message).stack;\n        if (stack !== undefined) {\n          this.stack = this.toString() + \"\\n\" + stack.replace(/^Error(:[^\\n]*)?\\n/, \"\");\n        }\n      });\n      errorClass.prototype = Object.create(baseErrorType.prototype);\n      errorClass.prototype.constructor = errorClass;\n      errorClass.prototype.toString = function () {\n        if (this.message === undefined) {\n          return this.name;\n        } else {\n          return this.name + \": \" + this.message;\n        }\n      };\n      return errorClass;\n    }\n    var PureVirtualError = undefined;\n    function embind_init_charCodes() {\n      var codes = new Array(256);\n      for (var i = 0; i < 256; ++i) {\n        codes[i] = String.fromCharCode(i);\n      }\n      embind_charCodes = codes;\n    }\n    var embind_charCodes = undefined;\n    function readLatin1String(ptr) {\n      var ret = \"\";\n      var c = ptr;\n      while (HEAPU8[c]) {\n        ret += embind_charCodes[HEAPU8[c++]];\n      }\n      return ret;\n    }\n    function getInheritedInstanceCount() {\n      return Object.keys(registeredInstances).length;\n    }\n    function getLiveInheritedInstances() {\n      var rv = [];\n      for (var k in registeredInstances) {\n        if (registeredInstances.hasOwnProperty(k)) {\n          rv.push(registeredInstances[k]);\n        }\n      }\n      return rv;\n    }\n    var deletionQueue = [];\n    function flushPendingDeletes() {\n      while (deletionQueue.length) {\n        var obj = deletionQueue.pop();\n        obj.$$.deleteScheduled = false;\n        obj[\"delete\"]();\n      }\n    }\n    var delayFunction = undefined;\n    function setDelayFunction(fn) {\n      delayFunction = fn;\n      if (deletionQueue.length && delayFunction) {\n        delayFunction(flushPendingDeletes);\n      }\n    }\n    function init_embind() {\n      Module[\"getInheritedInstanceCount\"] = getInheritedInstanceCount;\n      Module[\"getLiveInheritedInstances\"] = getLiveInheritedInstances;\n      Module[\"flushPendingDeletes\"] = flushPendingDeletes;\n      Module[\"setDelayFunction\"] = setDelayFunction;\n    }\n    var registeredInstances = {};\n    var BindingError = undefined;\n    function throwBindingError(message) {\n      throw new BindingError(message);\n    }\n    function getBasestPointer(class_, ptr) {\n      if (ptr === undefined) {\n        throwBindingError(\"ptr should not be undefined\");\n      }\n      while (class_.baseClass) {\n        ptr = class_.upcast(ptr);\n        class_ = class_.baseClass;\n      }\n      return ptr;\n    }\n    function registerInheritedInstance(class_, ptr, instance) {\n      ptr = getBasestPointer(class_, ptr);\n      if (registeredInstances.hasOwnProperty(ptr)) {\n        throwBindingError(\"Tried to register registered instance: \" + ptr);\n      } else {\n        registeredInstances[ptr] = instance;\n      }\n    }\n    function requireHandle(handle) {\n      if (!handle) {\n        throwBindingError(\"Cannot use deleted val. handle = \" + handle);\n      }\n      return emval_handle_array[handle].value;\n    }\n    var registeredTypes = {};\n    function getTypeName(type) {\n      var ptr = ___getTypeName(type);\n      var rv = readLatin1String(ptr);\n      _free(ptr);\n      return rv;\n    }\n    function requireRegisteredType(rawType, humanName) {\n      var impl = registeredTypes[rawType];\n      if (undefined === impl) {\n        throwBindingError(humanName + \" has unknown type \" + getTypeName(rawType));\n      }\n      return impl;\n    }\n    function unregisterInheritedInstance(class_, ptr) {\n      ptr = getBasestPointer(class_, ptr);\n      if (registeredInstances.hasOwnProperty(ptr)) {\n        delete registeredInstances[ptr];\n      } else {\n        throwBindingError(\"Tried to unregister unregistered instance: \" + ptr);\n      }\n    }\n    function detachFinalizer(handle) {}\n    var finalizationGroup = false;\n    function runDestructor($$) {\n      if ($$.smartPtr) {\n        $$.smartPtrType.rawDestructor($$.smartPtr);\n      } else {\n        $$.ptrType.registeredClass.rawDestructor($$.ptr);\n      }\n    }\n    function releaseClassHandle($$) {\n      $$.count.value -= 1;\n      var toDelete = 0 === $$.count.value;\n      if (toDelete) {\n        runDestructor($$);\n      }\n    }\n    function attachFinalizer(handle) {\n      if (\"undefined\" === typeof FinalizationGroup) {\n        attachFinalizer = function (handle) {\n          return handle;\n        };\n        return handle;\n      }\n      finalizationGroup = new FinalizationGroup(function (iter) {\n        for (var result = iter.next(); !result.done; result = iter.next()) {\n          var $$ = result.value;\n          if (!$$.ptr) {\n            console.warn(\"object already deleted: \" + $$.ptr);\n          } else {\n            releaseClassHandle($$);\n          }\n        }\n      });\n      attachFinalizer = function (handle) {\n        finalizationGroup.register(handle, handle.$$, handle.$$);\n        return handle;\n      };\n      detachFinalizer = function (handle) {\n        finalizationGroup.unregister(handle.$$);\n      };\n      return attachFinalizer(handle);\n    }\n    function __embind_create_inheriting_constructor(constructorName, wrapperType, properties) {\n      constructorName = readLatin1String(constructorName);\n      wrapperType = requireRegisteredType(wrapperType, \"wrapper\");\n      properties = requireHandle(properties);\n      var arraySlice = [].slice;\n      var registeredClass = wrapperType.registeredClass;\n      var wrapperPrototype = registeredClass.instancePrototype;\n      var baseClass = registeredClass.baseClass;\n      var baseClassPrototype = baseClass.instancePrototype;\n      var baseConstructor = registeredClass.baseClass.constructor;\n      var ctor = createNamedFunction(constructorName, function () {\n        registeredClass.baseClass.pureVirtualFunctions.forEach(function (name) {\n          if (this[name] === baseClassPrototype[name]) {\n            throw new PureVirtualError(\"Pure virtual function \" + name + \" must be implemented in JavaScript\");\n          }\n        }.bind(this));\n        Object.defineProperty(this, \"__parent\", {\n          value: wrapperPrototype\n        });\n        this[\"__construct\"].apply(this, arraySlice.call(arguments));\n      });\n      wrapperPrototype[\"__construct\"] = function __construct() {\n        if (this === wrapperPrototype) {\n          throwBindingError(\"Pass correct 'this' to __construct\");\n        }\n        var inner = baseConstructor[\"implement\"].apply(undefined, [this].concat(arraySlice.call(arguments)));\n        detachFinalizer(inner);\n        var $$ = inner.$$;\n        inner[\"notifyOnDestruction\"]();\n        $$.preservePointerOnDelete = true;\n        Object.defineProperties(this, {\n          $$: {\n            value: $$\n          }\n        });\n        attachFinalizer(this);\n        registerInheritedInstance(registeredClass, $$.ptr, this);\n      };\n      wrapperPrototype[\"__destruct\"] = function __destruct() {\n        if (this === wrapperPrototype) {\n          throwBindingError(\"Pass correct 'this' to __destruct\");\n        }\n        detachFinalizer(this);\n        unregisterInheritedInstance(registeredClass, this.$$.ptr);\n      };\n      ctor.prototype = Object.create(wrapperPrototype);\n      for (var p in properties) {\n        ctor.prototype[p] = properties[p];\n      }\n      return __emval_register(ctor);\n    }\n    var structRegistrations = {};\n    function runDestructors(destructors) {\n      while (destructors.length) {\n        var ptr = destructors.pop();\n        var del = destructors.pop();\n        del(ptr);\n      }\n    }\n    function simpleReadValueFromPointer(pointer) {\n      return this[\"fromWireType\"](HEAPU32[pointer >> 2]);\n    }\n    var awaitingDependencies = {};\n    var typeDependencies = {};\n    var InternalError = undefined;\n    function throwInternalError(message) {\n      throw new InternalError(message);\n    }\n    function whenDependentTypesAreResolved(myTypes, dependentTypes, getTypeConverters) {\n      myTypes.forEach(function (type) {\n        typeDependencies[type] = dependentTypes;\n      });\n      function onComplete(typeConverters) {\n        var myTypeConverters = getTypeConverters(typeConverters);\n        if (myTypeConverters.length !== myTypes.length) {\n          throwInternalError(\"Mismatched type converter count\");\n        }\n        for (var i = 0; i < myTypes.length; ++i) {\n          registerType(myTypes[i], myTypeConverters[i]);\n        }\n      }\n      var typeConverters = new Array(dependentTypes.length);\n      var unregisteredTypes = [];\n      var registered = 0;\n      dependentTypes.forEach(function (dt, i) {\n        if (registeredTypes.hasOwnProperty(dt)) {\n          typeConverters[i] = registeredTypes[dt];\n        } else {\n          unregisteredTypes.push(dt);\n          if (!awaitingDependencies.hasOwnProperty(dt)) {\n            awaitingDependencies[dt] = [];\n          }\n          awaitingDependencies[dt].push(function () {\n            typeConverters[i] = registeredTypes[dt];\n            ++registered;\n            if (registered === unregisteredTypes.length) {\n              onComplete(typeConverters);\n            }\n          });\n        }\n      });\n      if (0 === unregisteredTypes.length) {\n        onComplete(typeConverters);\n      }\n    }\n    function __embind_finalize_value_object(structType) {\n      var reg = structRegistrations[structType];\n      delete structRegistrations[structType];\n      var rawConstructor = reg.rawConstructor;\n      var rawDestructor = reg.rawDestructor;\n      var fieldRecords = reg.fields;\n      var fieldTypes = fieldRecords.map(function (field) {\n        return field.getterReturnType;\n      }).concat(fieldRecords.map(function (field) {\n        return field.setterArgumentType;\n      }));\n      whenDependentTypesAreResolved([structType], fieldTypes, function (fieldTypes) {\n        var fields = {};\n        fieldRecords.forEach(function (field, i) {\n          var fieldName = field.fieldName;\n          var getterReturnType = fieldTypes[i];\n          var getter = field.getter;\n          var getterContext = field.getterContext;\n          var setterArgumentType = fieldTypes[i + fieldRecords.length];\n          var setter = field.setter;\n          var setterContext = field.setterContext;\n          fields[fieldName] = {\n            read: function (ptr) {\n              return getterReturnType[\"fromWireType\"](getter(getterContext, ptr));\n            },\n            write: function (ptr, o) {\n              var destructors = [];\n              setter(setterContext, ptr, setterArgumentType[\"toWireType\"](destructors, o));\n              runDestructors(destructors);\n            }\n          };\n        });\n        return [{\n          name: reg.name,\n          \"fromWireType\": function (ptr) {\n            var rv = {};\n            for (var i in fields) {\n              rv[i] = fields[i].read(ptr);\n            }\n            rawDestructor(ptr);\n            return rv;\n          },\n          \"toWireType\": function (destructors, o) {\n            for (var fieldName in fields) {\n              if (!(fieldName in o)) {\n                throw new TypeError('Missing field:  \"' + fieldName + '\"');\n              }\n            }\n            var ptr = rawConstructor();\n            for (fieldName in fields) {\n              fields[fieldName].write(ptr, o[fieldName]);\n            }\n            if (destructors !== null) {\n              destructors.push(rawDestructor, ptr);\n            }\n            return ptr;\n          },\n          \"argPackAdvance\": 8,\n          \"readValueFromPointer\": simpleReadValueFromPointer,\n          destructorFunction: rawDestructor\n        }];\n      });\n    }\n    function getShiftFromSize(size) {\n      switch (size) {\n        case 1:\n          return 0;\n        case 2:\n          return 1;\n        case 4:\n          return 2;\n        case 8:\n          return 3;\n        default:\n          throw new TypeError(\"Unknown type size: \" + size);\n      }\n    }\n    function registerType(rawType, registeredInstance, options) {\n      options = options || {};\n      if (!(\"argPackAdvance\" in registeredInstance)) {\n        throw new TypeError(\"registerType registeredInstance requires argPackAdvance\");\n      }\n      var name = registeredInstance.name;\n      if (!rawType) {\n        throwBindingError('type \"' + name + '\" must have a positive integer typeid pointer');\n      }\n      if (registeredTypes.hasOwnProperty(rawType)) {\n        if (options.ignoreDuplicateRegistrations) {\n          return;\n        } else {\n          throwBindingError(\"Cannot register type '\" + name + \"' twice\");\n        }\n      }\n      registeredTypes[rawType] = registeredInstance;\n      delete typeDependencies[rawType];\n      if (awaitingDependencies.hasOwnProperty(rawType)) {\n        var callbacks = awaitingDependencies[rawType];\n        delete awaitingDependencies[rawType];\n        callbacks.forEach(function (cb) {\n          cb();\n        });\n      }\n    }\n    function __embind_register_bool(rawType, name, size, trueValue, falseValue) {\n      var shift = getShiftFromSize(size);\n      name = readLatin1String(name);\n      registerType(rawType, {\n        name: name,\n        \"fromWireType\": function (wt) {\n          return !!wt;\n        },\n        \"toWireType\": function (destructors, o) {\n          return o ? trueValue : falseValue;\n        },\n        \"argPackAdvance\": 8,\n        \"readValueFromPointer\": function (pointer) {\n          var heap;\n          if (size === 1) {\n            heap = HEAP8;\n          } else if (size === 2) {\n            heap = HEAP16;\n          } else if (size === 4) {\n            heap = HEAP32;\n          } else {\n            throw new TypeError(\"Unknown boolean type size: \" + name);\n          }\n          return this[\"fromWireType\"](heap[pointer >> shift]);\n        },\n        destructorFunction: null\n      });\n    }\n    function ClassHandle_isAliasOf(other) {\n      if (!(this instanceof ClassHandle)) {\n        return false;\n      }\n      if (!(other instanceof ClassHandle)) {\n        return false;\n      }\n      var leftClass = this.$$.ptrType.registeredClass;\n      var left = this.$$.ptr;\n      var rightClass = other.$$.ptrType.registeredClass;\n      var right = other.$$.ptr;\n      while (leftClass.baseClass) {\n        left = leftClass.upcast(left);\n        leftClass = leftClass.baseClass;\n      }\n      while (rightClass.baseClass) {\n        right = rightClass.upcast(right);\n        rightClass = rightClass.baseClass;\n      }\n      return leftClass === rightClass && left === right;\n    }\n    function shallowCopyInternalPointer(o) {\n      return {\n        count: o.count,\n        deleteScheduled: o.deleteScheduled,\n        preservePointerOnDelete: o.preservePointerOnDelete,\n        ptr: o.ptr,\n        ptrType: o.ptrType,\n        smartPtr: o.smartPtr,\n        smartPtrType: o.smartPtrType\n      };\n    }\n    function throwInstanceAlreadyDeleted(obj) {\n      function getInstanceTypeName(handle) {\n        return handle.$$.ptrType.registeredClass.name;\n      }\n      throwBindingError(getInstanceTypeName(obj) + \" instance already deleted\");\n    }\n    function ClassHandle_clone() {\n      if (!this.$$.ptr) {\n        throwInstanceAlreadyDeleted(this);\n      }\n      if (this.$$.preservePointerOnDelete) {\n        this.$$.count.value += 1;\n        return this;\n      } else {\n        var clone = attachFinalizer(Object.create(Object.getPrototypeOf(this), {\n          $$: {\n            value: shallowCopyInternalPointer(this.$$)\n          }\n        }));\n        clone.$$.count.value += 1;\n        clone.$$.deleteScheduled = false;\n        return clone;\n      }\n    }\n    function ClassHandle_delete() {\n      if (!this.$$.ptr) {\n        throwInstanceAlreadyDeleted(this);\n      }\n      if (this.$$.deleteScheduled && !this.$$.preservePointerOnDelete) {\n        throwBindingError(\"Object already scheduled for deletion\");\n      }\n      detachFinalizer(this);\n      releaseClassHandle(this.$$);\n      if (!this.$$.preservePointerOnDelete) {\n        this.$$.smartPtr = undefined;\n        this.$$.ptr = undefined;\n      }\n    }\n    function ClassHandle_isDeleted() {\n      return !this.$$.ptr;\n    }\n    function ClassHandle_deleteLater() {\n      if (!this.$$.ptr) {\n        throwInstanceAlreadyDeleted(this);\n      }\n      if (this.$$.deleteScheduled && !this.$$.preservePointerOnDelete) {\n        throwBindingError(\"Object already scheduled for deletion\");\n      }\n      deletionQueue.push(this);\n      if (deletionQueue.length === 1 && delayFunction) {\n        delayFunction(flushPendingDeletes);\n      }\n      this.$$.deleteScheduled = true;\n      return this;\n    }\n    function init_ClassHandle() {\n      ClassHandle.prototype[\"isAliasOf\"] = ClassHandle_isAliasOf;\n      ClassHandle.prototype[\"clone\"] = ClassHandle_clone;\n      ClassHandle.prototype[\"delete\"] = ClassHandle_delete;\n      ClassHandle.prototype[\"isDeleted\"] = ClassHandle_isDeleted;\n      ClassHandle.prototype[\"deleteLater\"] = ClassHandle_deleteLater;\n    }\n    function ClassHandle() {}\n    var registeredPointers = {};\n    function ensureOverloadTable(proto, methodName, humanName) {\n      if (undefined === proto[methodName].overloadTable) {\n        var prevFunc = proto[methodName];\n        proto[methodName] = function () {\n          if (!proto[methodName].overloadTable.hasOwnProperty(arguments.length)) {\n            throwBindingError(\"Function '\" + humanName + \"' called with an invalid number of arguments (\" + arguments.length + \") - expects one of (\" + proto[methodName].overloadTable + \")!\");\n          }\n          return proto[methodName].overloadTable[arguments.length].apply(this, arguments);\n        };\n        proto[methodName].overloadTable = [];\n        proto[methodName].overloadTable[prevFunc.argCount] = prevFunc;\n      }\n    }\n    function exposePublicSymbol(name, value, numArguments) {\n      if (Module.hasOwnProperty(name)) {\n        if (undefined === numArguments || undefined !== Module[name].overloadTable && undefined !== Module[name].overloadTable[numArguments]) {\n          throwBindingError(\"Cannot register public name '\" + name + \"' twice\");\n        }\n        ensureOverloadTable(Module, name, name);\n        if (Module.hasOwnProperty(numArguments)) {\n          throwBindingError(\"Cannot register multiple overloads of a function with the same number of arguments (\" + numArguments + \")!\");\n        }\n        Module[name].overloadTable[numArguments] = value;\n      } else {\n        Module[name] = value;\n        if (undefined !== numArguments) {\n          Module[name].numArguments = numArguments;\n        }\n      }\n    }\n    function RegisteredClass(name, constructor, instancePrototype, rawDestructor, baseClass, getActualType, upcast, downcast) {\n      this.name = name;\n      this.constructor = constructor;\n      this.instancePrototype = instancePrototype;\n      this.rawDestructor = rawDestructor;\n      this.baseClass = baseClass;\n      this.getActualType = getActualType;\n      this.upcast = upcast;\n      this.downcast = downcast;\n      this.pureVirtualFunctions = [];\n    }\n    function upcastPointer(ptr, ptrClass, desiredClass) {\n      while (ptrClass !== desiredClass) {\n        if (!ptrClass.upcast) {\n          throwBindingError(\"Expected null or instance of \" + desiredClass.name + \", got an instance of \" + ptrClass.name);\n        }\n        ptr = ptrClass.upcast(ptr);\n        ptrClass = ptrClass.baseClass;\n      }\n      return ptr;\n    }\n    function constNoSmartPtrRawPointerToWireType(destructors, handle) {\n      if (handle === null) {\n        if (this.isReference) {\n          throwBindingError(\"null is not a valid \" + this.name);\n        }\n        return 0;\n      }\n      if (!handle.$$) {\n        throwBindingError('Cannot pass \"' + _embind_repr(handle) + '\" as a ' + this.name);\n      }\n      if (!handle.$$.ptr) {\n        throwBindingError(\"Cannot pass deleted object as a pointer of type \" + this.name);\n      }\n      var handleClass = handle.$$.ptrType.registeredClass;\n      var ptr = upcastPointer(handle.$$.ptr, handleClass, this.registeredClass);\n      return ptr;\n    }\n    function genericPointerToWireType(destructors, handle) {\n      var ptr;\n      if (handle === null) {\n        if (this.isReference) {\n          throwBindingError(\"null is not a valid \" + this.name);\n        }\n        if (this.isSmartPointer) {\n          ptr = this.rawConstructor();\n          if (destructors !== null) {\n            destructors.push(this.rawDestructor, ptr);\n          }\n          return ptr;\n        } else {\n          return 0;\n        }\n      }\n      if (!handle.$$) {\n        throwBindingError('Cannot pass \"' + _embind_repr(handle) + '\" as a ' + this.name);\n      }\n      if (!handle.$$.ptr) {\n        throwBindingError(\"Cannot pass deleted object as a pointer of type \" + this.name);\n      }\n      if (!this.isConst && handle.$$.ptrType.isConst) {\n        throwBindingError(\"Cannot convert argument of type \" + (handle.$$.smartPtrType ? handle.$$.smartPtrType.name : handle.$$.ptrType.name) + \" to parameter type \" + this.name);\n      }\n      var handleClass = handle.$$.ptrType.registeredClass;\n      ptr = upcastPointer(handle.$$.ptr, handleClass, this.registeredClass);\n      if (this.isSmartPointer) {\n        if (undefined === handle.$$.smartPtr) {\n          throwBindingError(\"Passing raw pointer to smart pointer is illegal\");\n        }\n        switch (this.sharingPolicy) {\n          case 0:\n            if (handle.$$.smartPtrType === this) {\n              ptr = handle.$$.smartPtr;\n            } else {\n              throwBindingError(\"Cannot convert argument of type \" + (handle.$$.smartPtrType ? handle.$$.smartPtrType.name : handle.$$.ptrType.name) + \" to parameter type \" + this.name);\n            }\n            break;\n          case 1:\n            ptr = handle.$$.smartPtr;\n            break;\n          case 2:\n            if (handle.$$.smartPtrType === this) {\n              ptr = handle.$$.smartPtr;\n            } else {\n              var clonedHandle = handle[\"clone\"]();\n              ptr = this.rawShare(ptr, __emval_register(function () {\n                clonedHandle[\"delete\"]();\n              }));\n              if (destructors !== null) {\n                destructors.push(this.rawDestructor, ptr);\n              }\n            }\n            break;\n          default:\n            throwBindingError(\"Unsupporting sharing policy\");\n        }\n      }\n      return ptr;\n    }\n    function nonConstNoSmartPtrRawPointerToWireType(destructors, handle) {\n      if (handle === null) {\n        if (this.isReference) {\n          throwBindingError(\"null is not a valid \" + this.name);\n        }\n        return 0;\n      }\n      if (!handle.$$) {\n        throwBindingError('Cannot pass \"' + _embind_repr(handle) + '\" as a ' + this.name);\n      }\n      if (!handle.$$.ptr) {\n        throwBindingError(\"Cannot pass deleted object as a pointer of type \" + this.name);\n      }\n      if (handle.$$.ptrType.isConst) {\n        throwBindingError(\"Cannot convert argument of type \" + handle.$$.ptrType.name + \" to parameter type \" + this.name);\n      }\n      var handleClass = handle.$$.ptrType.registeredClass;\n      var ptr = upcastPointer(handle.$$.ptr, handleClass, this.registeredClass);\n      return ptr;\n    }\n    function RegisteredPointer_getPointee(ptr) {\n      if (this.rawGetPointee) {\n        ptr = this.rawGetPointee(ptr);\n      }\n      return ptr;\n    }\n    function RegisteredPointer_destructor(ptr) {\n      if (this.rawDestructor) {\n        this.rawDestructor(ptr);\n      }\n    }\n    function RegisteredPointer_deleteObject(handle) {\n      if (handle !== null) {\n        handle[\"delete\"]();\n      }\n    }\n    function downcastPointer(ptr, ptrClass, desiredClass) {\n      if (ptrClass === desiredClass) {\n        return ptr;\n      }\n      if (undefined === desiredClass.baseClass) {\n        return null;\n      }\n      var rv = downcastPointer(ptr, ptrClass, desiredClass.baseClass);\n      if (rv === null) {\n        return null;\n      }\n      return desiredClass.downcast(rv);\n    }\n    function getInheritedInstance(class_, ptr) {\n      ptr = getBasestPointer(class_, ptr);\n      return registeredInstances[ptr];\n    }\n    function makeClassHandle(prototype, record) {\n      if (!record.ptrType || !record.ptr) {\n        throwInternalError(\"makeClassHandle requires ptr and ptrType\");\n      }\n      var hasSmartPtrType = !!record.smartPtrType;\n      var hasSmartPtr = !!record.smartPtr;\n      if (hasSmartPtrType !== hasSmartPtr) {\n        throwInternalError(\"Both smartPtrType and smartPtr must be specified\");\n      }\n      record.count = {\n        value: 1\n      };\n      return attachFinalizer(Object.create(prototype, {\n        $$: {\n          value: record\n        }\n      }));\n    }\n    function RegisteredPointer_fromWireType(ptr) {\n      var rawPointer = this.getPointee(ptr);\n      if (!rawPointer) {\n        this.destructor(ptr);\n        return null;\n      }\n      var registeredInstance = getInheritedInstance(this.registeredClass, rawPointer);\n      if (undefined !== registeredInstance) {\n        if (0 === registeredInstance.$$.count.value) {\n          registeredInstance.$$.ptr = rawPointer;\n          registeredInstance.$$.smartPtr = ptr;\n          return registeredInstance[\"clone\"]();\n        } else {\n          var rv = registeredInstance[\"clone\"]();\n          this.destructor(ptr);\n          return rv;\n        }\n      }\n      function makeDefaultHandle() {\n        if (this.isSmartPointer) {\n          return makeClassHandle(this.registeredClass.instancePrototype, {\n            ptrType: this.pointeeType,\n            ptr: rawPointer,\n            smartPtrType: this,\n            smartPtr: ptr\n          });\n        } else {\n          return makeClassHandle(this.registeredClass.instancePrototype, {\n            ptrType: this,\n            ptr: ptr\n          });\n        }\n      }\n      var actualType = this.registeredClass.getActualType(rawPointer);\n      var registeredPointerRecord = registeredPointers[actualType];\n      if (!registeredPointerRecord) {\n        return makeDefaultHandle.call(this);\n      }\n      var toType;\n      if (this.isConst) {\n        toType = registeredPointerRecord.constPointerType;\n      } else {\n        toType = registeredPointerRecord.pointerType;\n      }\n      var dp = downcastPointer(rawPointer, this.registeredClass, toType.registeredClass);\n      if (dp === null) {\n        return makeDefaultHandle.call(this);\n      }\n      if (this.isSmartPointer) {\n        return makeClassHandle(toType.registeredClass.instancePrototype, {\n          ptrType: toType,\n          ptr: dp,\n          smartPtrType: this,\n          smartPtr: ptr\n        });\n      } else {\n        return makeClassHandle(toType.registeredClass.instancePrototype, {\n          ptrType: toType,\n          ptr: dp\n        });\n      }\n    }\n    function init_RegisteredPointer() {\n      RegisteredPointer.prototype.getPointee = RegisteredPointer_getPointee;\n      RegisteredPointer.prototype.destructor = RegisteredPointer_destructor;\n      RegisteredPointer.prototype[\"argPackAdvance\"] = 8;\n      RegisteredPointer.prototype[\"readValueFromPointer\"] = simpleReadValueFromPointer;\n      RegisteredPointer.prototype[\"deleteObject\"] = RegisteredPointer_deleteObject;\n      RegisteredPointer.prototype[\"fromWireType\"] = RegisteredPointer_fromWireType;\n    }\n    function RegisteredPointer(name, registeredClass, isReference, isConst, isSmartPointer, pointeeType, sharingPolicy, rawGetPointee, rawConstructor, rawShare, rawDestructor) {\n      this.name = name;\n      this.registeredClass = registeredClass;\n      this.isReference = isReference;\n      this.isConst = isConst;\n      this.isSmartPointer = isSmartPointer;\n      this.pointeeType = pointeeType;\n      this.sharingPolicy = sharingPolicy;\n      this.rawGetPointee = rawGetPointee;\n      this.rawConstructor = rawConstructor;\n      this.rawShare = rawShare;\n      this.rawDestructor = rawDestructor;\n      if (!isSmartPointer && registeredClass.baseClass === undefined) {\n        if (isConst) {\n          this[\"toWireType\"] = constNoSmartPtrRawPointerToWireType;\n          this.destructorFunction = null;\n        } else {\n          this[\"toWireType\"] = nonConstNoSmartPtrRawPointerToWireType;\n          this.destructorFunction = null;\n        }\n      } else {\n        this[\"toWireType\"] = genericPointerToWireType;\n      }\n    }\n    function replacePublicSymbol(name, value, numArguments) {\n      if (!Module.hasOwnProperty(name)) {\n        throwInternalError(\"Replacing nonexistant public symbol\");\n      }\n      if (undefined !== Module[name].overloadTable && undefined !== numArguments) {\n        Module[name].overloadTable[numArguments] = value;\n      } else {\n        Module[name] = value;\n        Module[name].argCount = numArguments;\n      }\n    }\n    function dynCallLegacy(sig, ptr, args) {\n      var f = Module[\"dynCall_\" + sig];\n      return args && args.length ? f.apply(null, [ptr].concat(args)) : f.call(null, ptr);\n    }\n    function dynCall(sig, ptr, args) {\n      if (sig.indexOf(\"j\") != -1) {\n        return dynCallLegacy(sig, ptr, args);\n      }\n      return wasmTable.get(ptr).apply(null, args);\n    }\n    function getDynCaller(sig, ptr) {\n      var argCache = [];\n      return function () {\n        argCache.length = arguments.length;\n        for (var i = 0; i < arguments.length; i++) {\n          argCache[i] = arguments[i];\n        }\n        return dynCall(sig, ptr, argCache);\n      };\n    }\n    function embind__requireFunction(signature, rawFunction) {\n      signature = readLatin1String(signature);\n      function makeDynCaller() {\n        if (signature.indexOf(\"j\") != -1) {\n          return getDynCaller(signature, rawFunction);\n        }\n        return wasmTable.get(rawFunction);\n      }\n      var fp = makeDynCaller();\n      if (typeof fp !== \"function\") {\n        throwBindingError(\"unknown function pointer with signature \" + signature + \": \" + rawFunction);\n      }\n      return fp;\n    }\n    var UnboundTypeError = undefined;\n    function throwUnboundTypeError(message, types) {\n      var unboundTypes = [];\n      var seen = {};\n      function visit(type) {\n        if (seen[type]) {\n          return;\n        }\n        if (registeredTypes[type]) {\n          return;\n        }\n        if (typeDependencies[type]) {\n          typeDependencies[type].forEach(visit);\n          return;\n        }\n        unboundTypes.push(type);\n        seen[type] = true;\n      }\n      types.forEach(visit);\n      throw new UnboundTypeError(message + \": \" + unboundTypes.map(getTypeName).join([\", \"]));\n    }\n    function __embind_register_class(rawType, rawPointerType, rawConstPointerType, baseClassRawType, getActualTypeSignature, getActualType, upcastSignature, upcast, downcastSignature, downcast, name, destructorSignature, rawDestructor) {\n      name = readLatin1String(name);\n      getActualType = embind__requireFunction(getActualTypeSignature, getActualType);\n      if (upcast) {\n        upcast = embind__requireFunction(upcastSignature, upcast);\n      }\n      if (downcast) {\n        downcast = embind__requireFunction(downcastSignature, downcast);\n      }\n      rawDestructor = embind__requireFunction(destructorSignature, rawDestructor);\n      var legalFunctionName = makeLegalFunctionName(name);\n      exposePublicSymbol(legalFunctionName, function () {\n        throwUnboundTypeError(\"Cannot construct \" + name + \" due to unbound types\", [baseClassRawType]);\n      });\n      whenDependentTypesAreResolved([rawType, rawPointerType, rawConstPointerType], baseClassRawType ? [baseClassRawType] : [], function (base) {\n        base = base[0];\n        var baseClass;\n        var basePrototype;\n        if (baseClassRawType) {\n          baseClass = base.registeredClass;\n          basePrototype = baseClass.instancePrototype;\n        } else {\n          basePrototype = ClassHandle.prototype;\n        }\n        var constructor = createNamedFunction(legalFunctionName, function () {\n          if (Object.getPrototypeOf(this) !== instancePrototype) {\n            throw new BindingError(\"Use 'new' to construct \" + name);\n          }\n          if (undefined === registeredClass.constructor_body) {\n            throw new BindingError(name + \" has no accessible constructor\");\n          }\n          var body = registeredClass.constructor_body[arguments.length];\n          if (undefined === body) {\n            throw new BindingError(\"Tried to invoke ctor of \" + name + \" with invalid number of parameters (\" + arguments.length + \") - expected (\" + Object.keys(registeredClass.constructor_body).toString() + \") parameters instead!\");\n          }\n          return body.apply(this, arguments);\n        });\n        var instancePrototype = Object.create(basePrototype, {\n          constructor: {\n            value: constructor\n          }\n        });\n        constructor.prototype = instancePrototype;\n        var registeredClass = new RegisteredClass(name, constructor, instancePrototype, rawDestructor, baseClass, getActualType, upcast, downcast);\n        var referenceConverter = new RegisteredPointer(name, registeredClass, true, false, false);\n        var pointerConverter = new RegisteredPointer(name + \"*\", registeredClass, false, false, false);\n        var constPointerConverter = new RegisteredPointer(name + \" const*\", registeredClass, false, true, false);\n        registeredPointers[rawType] = {\n          pointerType: pointerConverter,\n          constPointerType: constPointerConverter\n        };\n        replacePublicSymbol(legalFunctionName, constructor);\n        return [referenceConverter, pointerConverter, constPointerConverter];\n      });\n    }\n    function new_(constructor, argumentList) {\n      if (!(constructor instanceof Function)) {\n        throw new TypeError(\"new_ called with constructor type \" + typeof constructor + \" which is not a function\");\n      }\n      var dummy = createNamedFunction(constructor.name || \"unknownFunctionName\", function () {});\n      dummy.prototype = constructor.prototype;\n      var obj = new dummy();\n      var r = constructor.apply(obj, argumentList);\n      return r instanceof Object ? r : obj;\n    }\n    function craftInvokerFunction(humanName, argTypes, classType, cppInvokerFunc, cppTargetFunc) {\n      var argCount = argTypes.length;\n      if (argCount < 2) {\n        throwBindingError(\"argTypes array size mismatch! Must at least get return value and 'this' types!\");\n      }\n      var isClassMethodFunc = argTypes[1] !== null && classType !== null;\n      var needsDestructorStack = false;\n      for (var i = 1; i < argTypes.length; ++i) {\n        if (argTypes[i] !== null && argTypes[i].destructorFunction === undefined) {\n          needsDestructorStack = true;\n          break;\n        }\n      }\n      var returns = argTypes[0].name !== \"void\";\n      var argsList = \"\";\n      var argsListWired = \"\";\n      for (var i = 0; i < argCount - 2; ++i) {\n        argsList += (i !== 0 ? \", \" : \"\") + \"arg\" + i;\n        argsListWired += (i !== 0 ? \", \" : \"\") + \"arg\" + i + \"Wired\";\n      }\n      var invokerFnBody = \"return function \" + makeLegalFunctionName(humanName) + \"(\" + argsList + \") {\\n\" + \"if (arguments.length !== \" + (argCount - 2) + \") {\\n\" + \"throwBindingError('function \" + humanName + \" called with ' + arguments.length + ' arguments, expected \" + (argCount - 2) + \" args!');\\n\" + \"}\\n\";\n      if (needsDestructorStack) {\n        invokerFnBody += \"var destructors = [];\\n\";\n      }\n      var dtorStack = needsDestructorStack ? \"destructors\" : \"null\";\n      var args1 = [\"throwBindingError\", \"invoker\", \"fn\", \"runDestructors\", \"retType\", \"classParam\"];\n      var args2 = [throwBindingError, cppInvokerFunc, cppTargetFunc, runDestructors, argTypes[0], argTypes[1]];\n      if (isClassMethodFunc) {\n        invokerFnBody += \"var thisWired = classParam.toWireType(\" + dtorStack + \", this);\\n\";\n      }\n      for (var i = 0; i < argCount - 2; ++i) {\n        invokerFnBody += \"var arg\" + i + \"Wired = argType\" + i + \".toWireType(\" + dtorStack + \", arg\" + i + \"); // \" + argTypes[i + 2].name + \"\\n\";\n        args1.push(\"argType\" + i);\n        args2.push(argTypes[i + 2]);\n      }\n      if (isClassMethodFunc) {\n        argsListWired = \"thisWired\" + (argsListWired.length > 0 ? \", \" : \"\") + argsListWired;\n      }\n      invokerFnBody += (returns ? \"var rv = \" : \"\") + \"invoker(fn\" + (argsListWired.length > 0 ? \", \" : \"\") + argsListWired + \");\\n\";\n      if (needsDestructorStack) {\n        invokerFnBody += \"runDestructors(destructors);\\n\";\n      } else {\n        for (var i = isClassMethodFunc ? 1 : 2; i < argTypes.length; ++i) {\n          var paramName = i === 1 ? \"thisWired\" : \"arg\" + (i - 2) + \"Wired\";\n          if (argTypes[i].destructorFunction !== null) {\n            invokerFnBody += paramName + \"_dtor(\" + paramName + \"); // \" + argTypes[i].name + \"\\n\";\n            args1.push(paramName + \"_dtor\");\n            args2.push(argTypes[i].destructorFunction);\n          }\n        }\n      }\n      if (returns) {\n        invokerFnBody += \"var ret = retType.fromWireType(rv);\\n\" + \"return ret;\\n\";\n      } else {}\n      invokerFnBody += \"}\\n\";\n      args1.push(invokerFnBody);\n      var invokerFunction = new_(Function, args1).apply(null, args2);\n      return invokerFunction;\n    }\n    function heap32VectorToArray(count, firstElement) {\n      var array = [];\n      for (var i = 0; i < count; i++) {\n        array.push(HEAP32[(firstElement >> 2) + i]);\n      }\n      return array;\n    }\n    function __embind_register_class_class_function(rawClassType, methodName, argCount, rawArgTypesAddr, invokerSignature, rawInvoker, fn) {\n      var rawArgTypes = heap32VectorToArray(argCount, rawArgTypesAddr);\n      methodName = readLatin1String(methodName);\n      rawInvoker = embind__requireFunction(invokerSignature, rawInvoker);\n      whenDependentTypesAreResolved([], [rawClassType], function (classType) {\n        classType = classType[0];\n        var humanName = classType.name + \".\" + methodName;\n        function unboundTypesHandler() {\n          throwUnboundTypeError(\"Cannot call \" + humanName + \" due to unbound types\", rawArgTypes);\n        }\n        var proto = classType.registeredClass.constructor;\n        if (undefined === proto[methodName]) {\n          unboundTypesHandler.argCount = argCount - 1;\n          proto[methodName] = unboundTypesHandler;\n        } else {\n          ensureOverloadTable(proto, methodName, humanName);\n          proto[methodName].overloadTable[argCount - 1] = unboundTypesHandler;\n        }\n        whenDependentTypesAreResolved([], rawArgTypes, function (argTypes) {\n          var invokerArgsArray = [argTypes[0], null].concat(argTypes.slice(1));\n          var func = craftInvokerFunction(humanName, invokerArgsArray, null, rawInvoker, fn);\n          if (undefined === proto[methodName].overloadTable) {\n            func.argCount = argCount - 1;\n            proto[methodName] = func;\n          } else {\n            proto[methodName].overloadTable[argCount - 1] = func;\n          }\n          return [];\n        });\n        return [];\n      });\n    }\n    function validateThis(this_, classType, humanName) {\n      if (!(this_ instanceof Object)) {\n        throwBindingError(humanName + ' with invalid \"this\": ' + this_);\n      }\n      if (!(this_ instanceof classType.registeredClass.constructor)) {\n        throwBindingError(humanName + ' incompatible with \"this\" of type ' + this_.constructor.name);\n      }\n      if (!this_.$$.ptr) {\n        throwBindingError(\"cannot call emscripten binding method \" + humanName + \" on deleted object\");\n      }\n      return upcastPointer(this_.$$.ptr, this_.$$.ptrType.registeredClass, classType.registeredClass);\n    }\n    function __embind_register_class_class_property(rawClassType, fieldName, rawFieldType, rawFieldPtr, getterSignature, getter, setterSignature, setter) {\n      fieldName = readLatin1String(fieldName);\n      getter = embind__requireFunction(getterSignature, getter);\n      whenDependentTypesAreResolved([], [rawClassType], function (classType) {\n        classType = classType[0];\n        var humanName = classType.name + \".\" + fieldName;\n        var desc = {\n          get: function () {\n            throwUnboundTypeError(\"Cannot access \" + humanName + \" due to unbound types\", [rawFieldType]);\n          },\n          enumerable: true,\n          configurable: true\n        };\n        if (setter) {\n          desc.set = function () {\n            throwUnboundTypeError(\"Cannot access \" + humanName + \" due to unbound types\", [rawFieldType]);\n          };\n        } else {\n          desc.set = function (v) {\n            throwBindingError(humanName + \" is a read-only property\");\n          };\n        }\n        Object.defineProperty(classType.registeredClass.constructor, fieldName, desc);\n        whenDependentTypesAreResolved([], [rawFieldType], function (fieldType) {\n          fieldType = fieldType[0];\n          var desc = {\n            get: function () {\n              return fieldType[\"fromWireType\"](getter(rawFieldPtr));\n            },\n            enumerable: true\n          };\n          if (setter) {\n            setter = embind__requireFunction(setterSignature, setter);\n            desc.set = function (v) {\n              var destructors = [];\n              setter(rawFieldPtr, fieldType[\"toWireType\"](destructors, v));\n              runDestructors(destructors);\n            };\n          }\n          Object.defineProperty(classType.registeredClass.constructor, fieldName, desc);\n          return [];\n        });\n        return [];\n      });\n    }\n    function __embind_register_class_constructor(rawClassType, argCount, rawArgTypesAddr, invokerSignature, invoker, rawConstructor) {\n      assert(argCount > 0);\n      var rawArgTypes = heap32VectorToArray(argCount, rawArgTypesAddr);\n      invoker = embind__requireFunction(invokerSignature, invoker);\n      var args = [rawConstructor];\n      var destructors = [];\n      whenDependentTypesAreResolved([], [rawClassType], function (classType) {\n        classType = classType[0];\n        var humanName = \"constructor \" + classType.name;\n        if (undefined === classType.registeredClass.constructor_body) {\n          classType.registeredClass.constructor_body = [];\n        }\n        if (undefined !== classType.registeredClass.constructor_body[argCount - 1]) {\n          throw new BindingError(\"Cannot register multiple constructors with identical number of parameters (\" + (argCount - 1) + \") for class '\" + classType.name + \"'! Overload resolution is currently only performed using the parameter count, not actual type info!\");\n        }\n        classType.registeredClass.constructor_body[argCount - 1] = function unboundTypeHandler() {\n          throwUnboundTypeError(\"Cannot construct \" + classType.name + \" due to unbound types\", rawArgTypes);\n        };\n        whenDependentTypesAreResolved([], rawArgTypes, function (argTypes) {\n          classType.registeredClass.constructor_body[argCount - 1] = function constructor_body() {\n            if (arguments.length !== argCount - 1) {\n              throwBindingError(humanName + \" called with \" + arguments.length + \" arguments, expected \" + (argCount - 1));\n            }\n            destructors.length = 0;\n            args.length = argCount;\n            for (var i = 1; i < argCount; ++i) {\n              args[i] = argTypes[i][\"toWireType\"](destructors, arguments[i - 1]);\n            }\n            var ptr = invoker.apply(null, args);\n            runDestructors(destructors);\n            return argTypes[0][\"fromWireType\"](ptr);\n          };\n          return [];\n        });\n        return [];\n      });\n    }\n    function __embind_register_class_function(rawClassType, methodName, argCount, rawArgTypesAddr, invokerSignature, rawInvoker, context, isPureVirtual) {\n      var rawArgTypes = heap32VectorToArray(argCount, rawArgTypesAddr);\n      methodName = readLatin1String(methodName);\n      rawInvoker = embind__requireFunction(invokerSignature, rawInvoker);\n      whenDependentTypesAreResolved([], [rawClassType], function (classType) {\n        classType = classType[0];\n        var humanName = classType.name + \".\" + methodName;\n        if (isPureVirtual) {\n          classType.registeredClass.pureVirtualFunctions.push(methodName);\n        }\n        function unboundTypesHandler() {\n          throwUnboundTypeError(\"Cannot call \" + humanName + \" due to unbound types\", rawArgTypes);\n        }\n        var proto = classType.registeredClass.instancePrototype;\n        var method = proto[methodName];\n        if (undefined === method || undefined === method.overloadTable && method.className !== classType.name && method.argCount === argCount - 2) {\n          unboundTypesHandler.argCount = argCount - 2;\n          unboundTypesHandler.className = classType.name;\n          proto[methodName] = unboundTypesHandler;\n        } else {\n          ensureOverloadTable(proto, methodName, humanName);\n          proto[methodName].overloadTable[argCount - 2] = unboundTypesHandler;\n        }\n        whenDependentTypesAreResolved([], rawArgTypes, function (argTypes) {\n          var memberFunction = craftInvokerFunction(humanName, argTypes, classType, rawInvoker, context);\n          if (undefined === proto[methodName].overloadTable) {\n            memberFunction.argCount = argCount - 2;\n            proto[methodName] = memberFunction;\n          } else {\n            proto[methodName].overloadTable[argCount - 2] = memberFunction;\n          }\n          return [];\n        });\n        return [];\n      });\n    }\n    function __embind_register_class_property(classType, fieldName, getterReturnType, getterSignature, getter, getterContext, setterArgumentType, setterSignature, setter, setterContext) {\n      fieldName = readLatin1String(fieldName);\n      getter = embind__requireFunction(getterSignature, getter);\n      whenDependentTypesAreResolved([], [classType], function (classType) {\n        classType = classType[0];\n        var humanName = classType.name + \".\" + fieldName;\n        var desc = {\n          get: function () {\n            throwUnboundTypeError(\"Cannot access \" + humanName + \" due to unbound types\", [getterReturnType, setterArgumentType]);\n          },\n          enumerable: true,\n          configurable: true\n        };\n        if (setter) {\n          desc.set = function () {\n            throwUnboundTypeError(\"Cannot access \" + humanName + \" due to unbound types\", [getterReturnType, setterArgumentType]);\n          };\n        } else {\n          desc.set = function (v) {\n            throwBindingError(humanName + \" is a read-only property\");\n          };\n        }\n        Object.defineProperty(classType.registeredClass.instancePrototype, fieldName, desc);\n        whenDependentTypesAreResolved([], setter ? [getterReturnType, setterArgumentType] : [getterReturnType], function (types) {\n          var getterReturnType = types[0];\n          var desc = {\n            get: function () {\n              var ptr = validateThis(this, classType, humanName + \" getter\");\n              return getterReturnType[\"fromWireType\"](getter(getterContext, ptr));\n            },\n            enumerable: true\n          };\n          if (setter) {\n            setter = embind__requireFunction(setterSignature, setter);\n            var setterArgumentType = types[1];\n            desc.set = function (v) {\n              var ptr = validateThis(this, classType, humanName + \" setter\");\n              var destructors = [];\n              setter(setterContext, ptr, setterArgumentType[\"toWireType\"](destructors, v));\n              runDestructors(destructors);\n            };\n          }\n          Object.defineProperty(classType.registeredClass.instancePrototype, fieldName, desc);\n          return [];\n        });\n        return [];\n      });\n    }\n    function __emval_decref(handle) {\n      if (handle > 4 && 0 === --emval_handle_array[handle].refcount) {\n        emval_handle_array[handle] = undefined;\n        emval_free_list.push(handle);\n      }\n    }\n    function __embind_register_emval(rawType, name) {\n      name = readLatin1String(name);\n      registerType(rawType, {\n        name: name,\n        \"fromWireType\": function (handle) {\n          var rv = emval_handle_array[handle].value;\n          __emval_decref(handle);\n          return rv;\n        },\n        \"toWireType\": function (destructors, value) {\n          return __emval_register(value);\n        },\n        \"argPackAdvance\": 8,\n        \"readValueFromPointer\": simpleReadValueFromPointer,\n        destructorFunction: null\n      });\n    }\n    function enumReadValueFromPointer(name, shift, signed) {\n      switch (shift) {\n        case 0:\n          return function (pointer) {\n            var heap = signed ? HEAP8 : HEAPU8;\n            return this[\"fromWireType\"](heap[pointer]);\n          };\n        case 1:\n          return function (pointer) {\n            var heap = signed ? HEAP16 : HEAPU16;\n            return this[\"fromWireType\"](heap[pointer >> 1]);\n          };\n        case 2:\n          return function (pointer) {\n            var heap = signed ? HEAP32 : HEAPU32;\n            return this[\"fromWireType\"](heap[pointer >> 2]);\n          };\n        default:\n          throw new TypeError(\"Unknown integer type: \" + name);\n      }\n    }\n    function __embind_register_enum(rawType, name, size, isSigned) {\n      var shift = getShiftFromSize(size);\n      name = readLatin1String(name);\n      function ctor() {}\n      ctor.values = {};\n      registerType(rawType, {\n        name: name,\n        constructor: ctor,\n        \"fromWireType\": function (c) {\n          return this.constructor.values[c];\n        },\n        \"toWireType\": function (destructors, c) {\n          return c.value;\n        },\n        \"argPackAdvance\": 8,\n        \"readValueFromPointer\": enumReadValueFromPointer(name, shift, isSigned),\n        destructorFunction: null\n      });\n      exposePublicSymbol(name, ctor);\n    }\n    function __embind_register_enum_value(rawEnumType, name, enumValue) {\n      var enumType = requireRegisteredType(rawEnumType, \"enum\");\n      name = readLatin1String(name);\n      var Enum = enumType.constructor;\n      var Value = Object.create(enumType.constructor.prototype, {\n        value: {\n          value: enumValue\n        },\n        constructor: {\n          value: createNamedFunction(enumType.name + \"_\" + name, function () {})\n        }\n      });\n      Enum.values[enumValue] = Value;\n      Enum[name] = Value;\n    }\n    function _embind_repr(v) {\n      if (v === null) {\n        return \"null\";\n      }\n      var t = typeof v;\n      if (t === \"object\" || t === \"array\" || t === \"function\") {\n        return v.toString();\n      } else {\n        return \"\" + v;\n      }\n    }\n    function floatReadValueFromPointer(name, shift) {\n      switch (shift) {\n        case 2:\n          return function (pointer) {\n            return this[\"fromWireType\"](HEAPF32[pointer >> 2]);\n          };\n        case 3:\n          return function (pointer) {\n            return this[\"fromWireType\"](HEAPF64[pointer >> 3]);\n          };\n        default:\n          throw new TypeError(\"Unknown float type: \" + name);\n      }\n    }\n    function __embind_register_float(rawType, name, size) {\n      var shift = getShiftFromSize(size);\n      name = readLatin1String(name);\n      registerType(rawType, {\n        name: name,\n        \"fromWireType\": function (value) {\n          return value;\n        },\n        \"toWireType\": function (destructors, value) {\n          if (typeof value !== \"number\" && typeof value !== \"boolean\") {\n            throw new TypeError('Cannot convert \"' + _embind_repr(value) + '\" to ' + this.name);\n          }\n          return value;\n        },\n        \"argPackAdvance\": 8,\n        \"readValueFromPointer\": floatReadValueFromPointer(name, shift),\n        destructorFunction: null\n      });\n    }\n    function __embind_register_function(name, argCount, rawArgTypesAddr, signature, rawInvoker, fn) {\n      var argTypes = heap32VectorToArray(argCount, rawArgTypesAddr);\n      name = readLatin1String(name);\n      rawInvoker = embind__requireFunction(signature, rawInvoker);\n      exposePublicSymbol(name, function () {\n        throwUnboundTypeError(\"Cannot call \" + name + \" due to unbound types\", argTypes);\n      }, argCount - 1);\n      whenDependentTypesAreResolved([], argTypes, function (argTypes) {\n        var invokerArgsArray = [argTypes[0], null].concat(argTypes.slice(1));\n        replacePublicSymbol(name, craftInvokerFunction(name, invokerArgsArray, null, rawInvoker, fn), argCount - 1);\n        return [];\n      });\n    }\n    function integerReadValueFromPointer(name, shift, signed) {\n      switch (shift) {\n        case 0:\n          return signed ? function readS8FromPointer(pointer) {\n            return HEAP8[pointer];\n          } : function readU8FromPointer(pointer) {\n            return HEAPU8[pointer];\n          };\n        case 1:\n          return signed ? function readS16FromPointer(pointer) {\n            return HEAP16[pointer >> 1];\n          } : function readU16FromPointer(pointer) {\n            return HEAPU16[pointer >> 1];\n          };\n        case 2:\n          return signed ? function readS32FromPointer(pointer) {\n            return HEAP32[pointer >> 2];\n          } : function readU32FromPointer(pointer) {\n            return HEAPU32[pointer >> 2];\n          };\n        default:\n          throw new TypeError(\"Unknown integer type: \" + name);\n      }\n    }\n    function __embind_register_integer(primitiveType, name, size, minRange, maxRange) {\n      name = readLatin1String(name);\n      if (maxRange === -1) {\n        maxRange = 4294967295;\n      }\n      var shift = getShiftFromSize(size);\n      var fromWireType = function (value) {\n        return value;\n      };\n      if (minRange === 0) {\n        var bitshift = 32 - 8 * size;\n        fromWireType = function (value) {\n          return value << bitshift >>> bitshift;\n        };\n      }\n      var isUnsignedType = name.indexOf(\"unsigned\") != -1;\n      registerType(primitiveType, {\n        name: name,\n        \"fromWireType\": fromWireType,\n        \"toWireType\": function (destructors, value) {\n          if (typeof value !== \"number\" && typeof value !== \"boolean\") {\n            throw new TypeError('Cannot convert \"' + _embind_repr(value) + '\" to ' + this.name);\n          }\n          if (value < minRange || value > maxRange) {\n            throw new TypeError('Passing a number \"' + _embind_repr(value) + '\" from JS side to C/C++ side to an argument of type \"' + name + '\", which is outside the valid range [' + minRange + \", \" + maxRange + \"]!\");\n          }\n          return isUnsignedType ? value >>> 0 : value | 0;\n        },\n        \"argPackAdvance\": 8,\n        \"readValueFromPointer\": integerReadValueFromPointer(name, shift, minRange !== 0),\n        destructorFunction: null\n      });\n    }\n    function __embind_register_memory_view(rawType, dataTypeIndex, name) {\n      var typeMapping = [Int8Array, Uint8Array, Int16Array, Uint16Array, Int32Array, Uint32Array, Float32Array, Float64Array];\n      var TA = typeMapping[dataTypeIndex];\n      function decodeMemoryView(handle) {\n        handle = handle >> 2;\n        var heap = HEAPU32;\n        var size = heap[handle];\n        var data = heap[handle + 1];\n        return new TA(buffer, data, size);\n      }\n      name = readLatin1String(name);\n      registerType(rawType, {\n        name: name,\n        \"fromWireType\": decodeMemoryView,\n        \"argPackAdvance\": 8,\n        \"readValueFromPointer\": decodeMemoryView\n      }, {\n        ignoreDuplicateRegistrations: true\n      });\n    }\n    function __embind_register_std_string(rawType, name) {\n      name = readLatin1String(name);\n      var stdStringIsUTF8 = name === \"std::string\";\n      registerType(rawType, {\n        name: name,\n        \"fromWireType\": function (value) {\n          var length = HEAPU32[value >> 2];\n          var str;\n          if (stdStringIsUTF8) {\n            var decodeStartPtr = value + 4;\n            for (var i = 0; i <= length; ++i) {\n              var currentBytePtr = value + 4 + i;\n              if (i == length || HEAPU8[currentBytePtr] == 0) {\n                var maxRead = currentBytePtr - decodeStartPtr;\n                var stringSegment = UTF8ToString(decodeStartPtr, maxRead);\n                if (str === undefined) {\n                  str = stringSegment;\n                } else {\n                  str += String.fromCharCode(0);\n                  str += stringSegment;\n                }\n                decodeStartPtr = currentBytePtr + 1;\n              }\n            }\n          } else {\n            var a = new Array(length);\n            for (var i = 0; i < length; ++i) {\n              a[i] = String.fromCharCode(HEAPU8[value + 4 + i]);\n            }\n            str = a.join(\"\");\n          }\n          _free(value);\n          return str;\n        },\n        \"toWireType\": function (destructors, value) {\n          if (value instanceof ArrayBuffer) {\n            value = new Uint8Array(value);\n          }\n          var getLength;\n          var valueIsOfTypeString = typeof value === \"string\";\n          if (!(valueIsOfTypeString || value instanceof Uint8Array || value instanceof Uint8ClampedArray || value instanceof Int8Array)) {\n            throwBindingError(\"Cannot pass non-string to std::string\");\n          }\n          if (stdStringIsUTF8 && valueIsOfTypeString) {\n            getLength = function () {\n              return lengthBytesUTF8(value);\n            };\n          } else {\n            getLength = function () {\n              return value.length;\n            };\n          }\n          var length = getLength();\n          var ptr = _malloc(4 + length + 1);\n          HEAPU32[ptr >> 2] = length;\n          if (stdStringIsUTF8 && valueIsOfTypeString) {\n            stringToUTF8(value, ptr + 4, length + 1);\n          } else {\n            if (valueIsOfTypeString) {\n              for (var i = 0; i < length; ++i) {\n                var charCode = value.charCodeAt(i);\n                if (charCode > 255) {\n                  _free(ptr);\n                  throwBindingError(\"String has UTF-16 code units that do not fit in 8 bits\");\n                }\n                HEAPU8[ptr + 4 + i] = charCode;\n              }\n            } else {\n              for (var i = 0; i < length; ++i) {\n                HEAPU8[ptr + 4 + i] = value[i];\n              }\n            }\n          }\n          if (destructors !== null) {\n            destructors.push(_free, ptr);\n          }\n          return ptr;\n        },\n        \"argPackAdvance\": 8,\n        \"readValueFromPointer\": simpleReadValueFromPointer,\n        destructorFunction: function (ptr) {\n          _free(ptr);\n        }\n      });\n    }\n    function __embind_register_std_wstring(rawType, charSize, name) {\n      name = readLatin1String(name);\n      var decodeString, encodeString, getHeap, lengthBytesUTF, shift;\n      if (charSize === 2) {\n        decodeString = UTF16ToString;\n        encodeString = stringToUTF16;\n        lengthBytesUTF = lengthBytesUTF16;\n        getHeap = function () {\n          return HEAPU16;\n        };\n        shift = 1;\n      } else if (charSize === 4) {\n        decodeString = UTF32ToString;\n        encodeString = stringToUTF32;\n        lengthBytesUTF = lengthBytesUTF32;\n        getHeap = function () {\n          return HEAPU32;\n        };\n        shift = 2;\n      }\n      registerType(rawType, {\n        name: name,\n        \"fromWireType\": function (value) {\n          var length = HEAPU32[value >> 2];\n          var HEAP = getHeap();\n          var str;\n          var decodeStartPtr = value + 4;\n          for (var i = 0; i <= length; ++i) {\n            var currentBytePtr = value + 4 + i * charSize;\n            if (i == length || HEAP[currentBytePtr >> shift] == 0) {\n              var maxReadBytes = currentBytePtr - decodeStartPtr;\n              var stringSegment = decodeString(decodeStartPtr, maxReadBytes);\n              if (str === undefined) {\n                str = stringSegment;\n              } else {\n                str += String.fromCharCode(0);\n                str += stringSegment;\n              }\n              decodeStartPtr = currentBytePtr + charSize;\n            }\n          }\n          _free(value);\n          return str;\n        },\n        \"toWireType\": function (destructors, value) {\n          if (!(typeof value === \"string\")) {\n            throwBindingError(\"Cannot pass non-string to C++ string type \" + name);\n          }\n          var length = lengthBytesUTF(value);\n          var ptr = _malloc(4 + length + charSize);\n          HEAPU32[ptr >> 2] = length >> shift;\n          encodeString(value, ptr + 4, length + charSize);\n          if (destructors !== null) {\n            destructors.push(_free, ptr);\n          }\n          return ptr;\n        },\n        \"argPackAdvance\": 8,\n        \"readValueFromPointer\": simpleReadValueFromPointer,\n        destructorFunction: function (ptr) {\n          _free(ptr);\n        }\n      });\n    }\n    function __embind_register_value_object(rawType, name, constructorSignature, rawConstructor, destructorSignature, rawDestructor) {\n      structRegistrations[rawType] = {\n        name: readLatin1String(name),\n        rawConstructor: embind__requireFunction(constructorSignature, rawConstructor),\n        rawDestructor: embind__requireFunction(destructorSignature, rawDestructor),\n        fields: []\n      };\n    }\n    function __embind_register_value_object_field(structType, fieldName, getterReturnType, getterSignature, getter, getterContext, setterArgumentType, setterSignature, setter, setterContext) {\n      structRegistrations[structType].fields.push({\n        fieldName: readLatin1String(fieldName),\n        getterReturnType: getterReturnType,\n        getter: embind__requireFunction(getterSignature, getter),\n        getterContext: getterContext,\n        setterArgumentType: setterArgumentType,\n        setter: embind__requireFunction(setterSignature, setter),\n        setterContext: setterContext\n      });\n    }\n    function __embind_register_void(rawType, name) {\n      name = readLatin1String(name);\n      registerType(rawType, {\n        isVoid: true,\n        name: name,\n        \"argPackAdvance\": 0,\n        \"fromWireType\": function () {\n          return undefined;\n        },\n        \"toWireType\": function (destructors, o) {\n          return undefined;\n        }\n      });\n    }\n    function __emval_as(handle, returnType, destructorsRef) {\n      handle = requireHandle(handle);\n      returnType = requireRegisteredType(returnType, \"emval::as\");\n      var destructors = [];\n      var rd = __emval_register(destructors);\n      HEAP32[destructorsRef >> 2] = rd;\n      return returnType[\"toWireType\"](destructors, handle);\n    }\n    function __emval_allocateDestructors(destructorsRef) {\n      var destructors = [];\n      HEAP32[destructorsRef >> 2] = __emval_register(destructors);\n      return destructors;\n    }\n    var emval_symbols = {};\n    function getStringOrSymbol(address) {\n      var symbol = emval_symbols[address];\n      if (symbol === undefined) {\n        return readLatin1String(address);\n      } else {\n        return symbol;\n      }\n    }\n    var emval_methodCallers = [];\n    function __emval_call_method(caller, handle, methodName, destructorsRef, args) {\n      caller = emval_methodCallers[caller];\n      handle = requireHandle(handle);\n      methodName = getStringOrSymbol(methodName);\n      return caller(handle, methodName, __emval_allocateDestructors(destructorsRef), args);\n    }\n    function __emval_call_void_method(caller, handle, methodName, args) {\n      caller = emval_methodCallers[caller];\n      handle = requireHandle(handle);\n      methodName = getStringOrSymbol(methodName);\n      caller(handle, methodName, null, args);\n    }\n    function __emval_addMethodCaller(caller) {\n      var id = emval_methodCallers.length;\n      emval_methodCallers.push(caller);\n      return id;\n    }\n    function __emval_lookupTypes(argCount, argTypes) {\n      var a = new Array(argCount);\n      for (var i = 0; i < argCount; ++i) {\n        a[i] = requireRegisteredType(HEAP32[(argTypes >> 2) + i], \"parameter \" + i);\n      }\n      return a;\n    }\n    function __emval_get_method_caller(argCount, argTypes) {\n      var types = __emval_lookupTypes(argCount, argTypes);\n      var retType = types[0];\n      var signatureName = retType.name + \"_$\" + types.slice(1).map(function (t) {\n        return t.name;\n      }).join(\"_\") + \"$\";\n      var params = [\"retType\"];\n      var args = [retType];\n      var argsList = \"\";\n      for (var i = 0; i < argCount - 1; ++i) {\n        argsList += (i !== 0 ? \", \" : \"\") + \"arg\" + i;\n        params.push(\"argType\" + i);\n        args.push(types[1 + i]);\n      }\n      var functionName = makeLegalFunctionName(\"methodCaller_\" + signatureName);\n      var functionBody = \"return function \" + functionName + \"(handle, name, destructors, args) {\\n\";\n      var offset = 0;\n      for (var i = 0; i < argCount - 1; ++i) {\n        functionBody += \"    var arg\" + i + \" = argType\" + i + \".readValueFromPointer(args\" + (offset ? \"+\" + offset : \"\") + \");\\n\";\n        offset += types[i + 1][\"argPackAdvance\"];\n      }\n      functionBody += \"    var rv = handle[name](\" + argsList + \");\\n\";\n      for (var i = 0; i < argCount - 1; ++i) {\n        if (types[i + 1][\"deleteObject\"]) {\n          functionBody += \"    argType\" + i + \".deleteObject(arg\" + i + \");\\n\";\n        }\n      }\n      if (!retType.isVoid) {\n        functionBody += \"    return retType.toWireType(destructors, rv);\\n\";\n      }\n      functionBody += \"};\\n\";\n      params.push(functionBody);\n      var invokerFunction = new_(Function, params).apply(null, args);\n      return __emval_addMethodCaller(invokerFunction);\n    }\n    function __emval_get_module_property(name) {\n      name = getStringOrSymbol(name);\n      return __emval_register(Module[name]);\n    }\n    function __emval_get_property(handle, key) {\n      handle = requireHandle(handle);\n      key = requireHandle(key);\n      return __emval_register(handle[key]);\n    }\n    function __emval_incref(handle) {\n      if (handle > 4) {\n        emval_handle_array[handle].refcount += 1;\n      }\n    }\n    function __emval_new_cstring(v) {\n      return __emval_register(getStringOrSymbol(v));\n    }\n    function __emval_run_destructors(handle) {\n      var destructors = emval_handle_array[handle].value;\n      runDestructors(destructors);\n      __emval_decref(handle);\n    }\n    function __emval_take_value(type, argv) {\n      type = requireRegisteredType(type, \"_emval_take_value\");\n      var v = type[\"readValueFromPointer\"](argv);\n      return __emval_register(v);\n    }\n    function _abort() {\n      abort();\n    }\n    function emscripten_realloc_buffer(size) {\n      try {\n        wasmMemory.grow(size - buffer.byteLength + 65535 >>> 16);\n        updateGlobalBufferAndViews(wasmMemory.buffer);\n        return 1;\n      } catch (e) {}\n    }\n    function _emscripten_resize_heap(requestedSize) {\n      var oldSize = HEAPU8.length;\n      requestedSize = requestedSize >>> 0;\n      var maxHeapSize = 2147483648;\n      if (requestedSize > maxHeapSize) {\n        return false;\n      }\n      for (var cutDown = 1; cutDown <= 4; cutDown *= 2) {\n        var overGrownHeapSize = oldSize * (1 + .2 / cutDown);\n        overGrownHeapSize = Math.min(overGrownHeapSize, requestedSize + 100663296);\n        var newSize = Math.min(maxHeapSize, alignUp(Math.max(requestedSize, overGrownHeapSize), 65536));\n        var replacement = emscripten_realloc_buffer(newSize);\n        if (replacement) {\n          return true;\n        }\n      }\n      return false;\n    }\n    var SYSCALLS = {\n      mappings: {},\n      buffers: [null, [], []],\n      printChar: function (stream, curr) {\n        var buffer = SYSCALLS.buffers[stream];\n        if (curr === 0 || curr === 10) {\n          (stream === 1 ? out : err)(UTF8ArrayToString(buffer, 0));\n          buffer.length = 0;\n        } else {\n          buffer.push(curr);\n        }\n      },\n      varargs: undefined,\n      get: function () {\n        SYSCALLS.varargs += 4;\n        var ret = HEAP32[SYSCALLS.varargs - 4 >> 2];\n        return ret;\n      },\n      getStr: function (ptr) {\n        var ret = UTF8ToString(ptr);\n        return ret;\n      },\n      get64: function (low, high) {\n        return low;\n      }\n    };\n    function _fd_close(fd) {\n      return 0;\n    }\n    function _fd_seek(fd, offset_low, offset_high, whence, newOffset) {}\n    function _fd_write(fd, iov, iovcnt, pnum) {\n      var num = 0;\n      for (var i = 0; i < iovcnt; i++) {\n        var ptr = HEAP32[iov + i * 8 >> 2];\n        var len = HEAP32[iov + (i * 8 + 4) >> 2];\n        for (var j = 0; j < len; j++) {\n          SYSCALLS.printChar(fd, HEAPU8[ptr + j]);\n        }\n        num += len;\n      }\n      HEAP32[pnum >> 2] = num;\n      return 0;\n    }\n    function _setTempRet0($i) {\n      setTempRet0($i | 0);\n    }\n    init_emval();\n    PureVirtualError = Module[\"PureVirtualError\"] = extendError(Error, \"PureVirtualError\");\n    embind_init_charCodes();\n    init_embind();\n    BindingError = Module[\"BindingError\"] = extendError(Error, \"BindingError\");\n    InternalError = Module[\"InternalError\"] = extendError(Error, \"InternalError\");\n    init_ClassHandle();\n    init_RegisteredPointer();\n    UnboundTypeError = Module[\"UnboundTypeError\"] = extendError(Error, \"UnboundTypeError\");\n    var ASSERTIONS = false;\n    function intArrayToString(array) {\n      var ret = [];\n      for (var i = 0; i < array.length; i++) {\n        var chr = array[i];\n        if (chr > 255) {\n          if (ASSERTIONS) {\n            assert(false, \"Character code \" + chr + \" (\" + String.fromCharCode(chr) + \")  at offset \" + i + \" not in 0x00-0xFF.\");\n          }\n          chr &= 255;\n        }\n        ret.push(String.fromCharCode(chr));\n      }\n      return ret.join(\"\");\n    }\n    var decodeBase64 = typeof atob === \"function\" ? atob : function (input) {\n      var keyStr = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\";\n      var output = \"\";\n      var chr1, chr2, chr3;\n      var enc1, enc2, enc3, enc4;\n      var i = 0;\n      input = input.replace(/[^A-Za-z0-9\\+\\/\\=]/g, \"\");\n      do {\n        enc1 = keyStr.indexOf(input.charAt(i++));\n        enc2 = keyStr.indexOf(input.charAt(i++));\n        enc3 = keyStr.indexOf(input.charAt(i++));\n        enc4 = keyStr.indexOf(input.charAt(i++));\n        chr1 = enc1 << 2 | enc2 >> 4;\n        chr2 = (enc2 & 15) << 4 | enc3 >> 2;\n        chr3 = (enc3 & 3) << 6 | enc4;\n        output = output + String.fromCharCode(chr1);\n        if (enc3 !== 64) {\n          output = output + String.fromCharCode(chr2);\n        }\n        if (enc4 !== 64) {\n          output = output + String.fromCharCode(chr3);\n        }\n      } while (i < input.length);\n      return output;\n    };\n    function intArrayFromBase64(s) {\n      if (typeof ENVIRONMENT_IS_NODE === \"boolean\" && ENVIRONMENT_IS_NODE) {\n        var buf;\n        try {\n          buf = Buffer.from(s, \"base64\");\n        } catch (_) {\n          buf = new Buffer(s, \"base64\");\n        }\n        return new Uint8Array(buf[\"buffer\"], buf[\"byteOffset\"], buf[\"byteLength\"]);\n      }\n      try {\n        var decoded = decodeBase64(s);\n        var bytes = new Uint8Array(decoded.length);\n        for (var i = 0; i < decoded.length; ++i) {\n          bytes[i] = decoded.charCodeAt(i);\n        }\n        return bytes;\n      } catch (_) {\n        throw new Error(\"Converting base64 string to bytes failed.\");\n      }\n    }\n    function tryParseAsDataURI(filename) {\n      if (!isDataURI(filename)) {\n        return;\n      }\n      return intArrayFromBase64(filename.slice(dataURIPrefix.length));\n    }\n    var asmLibraryArg = {\n      \"n\": __embind_create_inheriting_constructor,\n      \"H\": __embind_finalize_value_object,\n      \"A\": __embind_register_bool,\n      \"c\": __embind_register_class,\n      \"i\": __embind_register_class_class_function,\n      \"f\": __embind_register_class_class_property,\n      \"r\": __embind_register_class_constructor,\n      \"a\": __embind_register_class_function,\n      \"b\": __embind_register_class_property,\n      \"z\": __embind_register_emval,\n      \"k\": __embind_register_enum,\n      \"j\": __embind_register_enum_value,\n      \"p\": __embind_register_float,\n      \"K\": __embind_register_function,\n      \"h\": __embind_register_integer,\n      \"g\": __embind_register_memory_view,\n      \"q\": __embind_register_std_string,\n      \"m\": __embind_register_std_wstring,\n      \"J\": __embind_register_value_object,\n      \"I\": __embind_register_value_object_field,\n      \"B\": __embind_register_void,\n      \"l\": __emval_as,\n      \"G\": __emval_call_method,\n      \"e\": __emval_call_void_method,\n      \"D\": __emval_decref,\n      \"d\": __emval_get_method_caller,\n      \"L\": __emval_get_module_property,\n      \"u\": __emval_get_property,\n      \"C\": __emval_incref,\n      \"E\": __emval_new_cstring,\n      \"F\": __emval_run_destructors,\n      \"t\": __emval_take_value,\n      \"s\": _abort,\n      \"x\": _emscripten_resize_heap,\n      \"y\": _fd_close,\n      \"v\": _fd_seek,\n      \"o\": _fd_write,\n      \"w\": _setTempRet0\n    };\n    var asm = createWasm();\n    var ___wasm_call_ctors = Module[\"___wasm_call_ctors\"] = function () {\n      return (___wasm_call_ctors = Module[\"___wasm_call_ctors\"] = Module[\"asm\"][\"N\"]).apply(null, arguments);\n    };\n    var _malloc = Module[\"_malloc\"] = function () {\n      return (_malloc = Module[\"_malloc\"] = Module[\"asm\"][\"P\"]).apply(null, arguments);\n    };\n    var ___getTypeName = Module[\"___getTypeName\"] = function () {\n      return (___getTypeName = Module[\"___getTypeName\"] = Module[\"asm\"][\"Q\"]).apply(null, arguments);\n    };\n    var ___embind_register_native_and_builtin_types = Module[\"___embind_register_native_and_builtin_types\"] = function () {\n      return (___embind_register_native_and_builtin_types = Module[\"___embind_register_native_and_builtin_types\"] = Module[\"asm\"][\"R\"]).apply(null, arguments);\n    };\n    var _free = Module[\"_free\"] = function () {\n      return (_free = Module[\"_free\"] = Module[\"asm\"][\"S\"]).apply(null, arguments);\n    };\n    var dynCall_jiji = Module[\"dynCall_jiji\"] = function () {\n      return (dynCall_jiji = Module[\"dynCall_jiji\"] = Module[\"asm\"][\"T\"]).apply(null, arguments);\n    };\n    var calledRun;\n    function ExitStatus(status) {\n      this.name = \"ExitStatus\";\n      this.message = \"Program terminated with exit(\" + status + \")\";\n      this.status = status;\n    }\n    dependenciesFulfilled = function runCaller() {\n      if (!calledRun) run();\n      if (!calledRun) dependenciesFulfilled = runCaller;\n    };\n    function run(args) {\n      args = args || arguments_;\n      if (runDependencies > 0) {\n        return;\n      }\n      preRun();\n      if (runDependencies > 0) {\n        return;\n      }\n      function doRun() {\n        if (calledRun) return;\n        calledRun = true;\n        Module[\"calledRun\"] = true;\n        if (ABORT) return;\n        initRuntime();\n        preMain();\n        readyPromiseResolve(Module);\n        if (Module[\"onRuntimeInitialized\"]) Module[\"onRuntimeInitialized\"]();\n        postRun();\n      }\n      if (Module[\"setStatus\"]) {\n        Module[\"setStatus\"](\"Running...\");\n        setTimeout(function () {\n          setTimeout(function () {\n            Module[\"setStatus\"](\"\");\n          }, 1);\n          doRun();\n        }, 1);\n      } else {\n        doRun();\n      }\n    }\n    Module[\"run\"] = run;\n    if (Module[\"preInit\"]) {\n      if (typeof Module[\"preInit\"] == \"function\") Module[\"preInit\"] = [Module[\"preInit\"]];\n      while (Module[\"preInit\"].length > 0) {\n        Module[\"preInit\"].pop()();\n      }\n    }\n    run();\n    function makeMatrix(m2d) {\n      const m = new DOMMatrix();\n      m.a = m2d.xx;\n      m.b = m2d.xy;\n      m.c = m2d.yx;\n      m.d = m2d.yy;\n      m.e = m2d.tx;\n      m.f = m2d.ty;\n      return m;\n    }\n    Module.onRuntimeInitialized = function () {\n      const {\n        RenderPaintStyle,\n        FillRule,\n        RenderPath,\n        RenderPaint,\n        Renderer,\n        StrokeCap,\n        StrokeJoin,\n        BlendMode\n      } = Module;\n      const {\n        fill,\n        stroke\n      } = RenderPaintStyle;\n      const {\n        evenOdd,\n        nonZero\n      } = FillRule;\n      var CanvasRenderPath = RenderPath.extend(\"CanvasRenderPath\", {\n        __construct: function () {\n          this.__parent.__construct.call(this);\n          this._path2D = new Path2D();\n        },\n        reset: function () {\n          this._path2D = new Path2D();\n        },\n        addPath: function (path, m2d) {\n          this._path2D.addPath(path._path2D, makeMatrix(m2d));\n        },\n        fillRule: function (fillRule) {\n          this._fillRule = fillRule;\n        },\n        moveTo: function (x, y) {\n          this._path2D.moveTo(x, y);\n        },\n        lineTo: function (x, y) {\n          this._path2D.lineTo(x, y);\n        },\n        cubicTo: function (ox, oy, ix, iy, x, y) {\n          this._path2D.bezierCurveTo(ox, oy, ix, iy, x, y);\n        },\n        close: function () {\n          this._path2D.closePath();\n        }\n      });\n      function _colorStyle(value) {\n        return 'rgba(' + ((0x00ff0000 & value) >>> 16) + ',' + ((0x0000ff00 & value) >>> 8) + ',' + ((0x000000ff & value) >>> 0) + ',' + ((0xff000000 & value) >>> 24) / 0xFF + ')';\n      }\n      var CanvasRenderPaint = RenderPaint.extend(\"CanvasRenderPaint\", {\n        color: function (value) {\n          this._value = _colorStyle(value);\n        },\n        thickness: function (value) {\n          this._thickness = value;\n        },\n        join: function (value) {\n          switch (value) {\n            case StrokeJoin.miter:\n              this._join = 'miter';\n              break;\n            case StrokeJoin.round:\n              this._join = 'round';\n              break;\n            case StrokeJoin.bevel:\n              this._join = 'bevel';\n              break;\n          }\n        },\n        cap: function (value) {\n          switch (value) {\n            case StrokeCap.butt:\n              this._cap = 'butt';\n              break;\n            case StrokeCap.round:\n              this._cap = 'round';\n              break;\n            case StrokeCap.square:\n              this._cap = 'square';\n              break;\n          }\n        },\n        style: function (value) {\n          this._style = value;\n        },\n        blendMode: function (value) {\n          switch (value) {\n            case BlendMode.srcOver:\n              this._blend = 'source-over';\n              break;\n            case BlendMode.screen:\n              this._blend = 'screen';\n              break;\n            case BlendMode.overlay:\n              this._blend = 'overlay';\n              break;\n            case BlendMode.darken:\n              this._blend = 'darken';\n              break;\n            case BlendMode.lighten:\n              this._blend = 'lighten';\n              break;\n            case BlendMode.colorDodge:\n              this._blend = 'color-dodge';\n              break;\n            case BlendMode.colorBurn:\n              this._blend = 'color-burn';\n              break;\n            case BlendMode.hardLight:\n              this._blend = 'hard-light';\n              break;\n            case BlendMode.softLight:\n              this._blend = 'soft-light';\n              break;\n            case BlendMode.difference:\n              this._blend = 'difference';\n              break;\n            case BlendMode.exclusion:\n              this._blend = 'exclusion';\n              break;\n            case BlendMode.multiply:\n              this._blend = 'multiply';\n              break;\n            case BlendMode.hue:\n              this._blend = 'hue';\n              break;\n            case BlendMode.saturation:\n              this._blend = 'saturation';\n              break;\n            case BlendMode.color:\n              this._blend = 'color';\n              break;\n            case BlendMode.luminosity:\n              this._blend = 'luminosity';\n              break;\n          }\n        },\n        linearGradient: function (sx, sy, ex, ey) {\n          this._gradient = {\n            sx,\n            sy,\n            ex,\n            ey,\n            stops: []\n          };\n        },\n        radialGradient: function (sx, sy, ex, ey) {\n          this._gradient = {\n            sx,\n            sy,\n            ex,\n            ey,\n            stops: [],\n            isRadial: true\n          };\n        },\n        addStop: function (color, stop) {\n          this._gradient.stops.push({\n            color,\n            stop\n          });\n        },\n        completeGradient: function () {},\n        draw: function (ctx, path) {\n          let {\n            _style,\n            _value,\n            _gradient,\n            _blend\n          } = this;\n          ctx.globalCompositeOperation = _blend;\n          if (_gradient != null) {\n            const {\n              sx,\n              sy,\n              ex,\n              ey,\n              stops,\n              isRadial\n            } = _gradient;\n            if (isRadial) {\n              var dx = ex - sx;\n              var dy = ey - sy;\n              var radius = Math.sqrt(dx * dx + dy * dy);\n              _value = ctx.createRadialGradient(sx, sy, 0, sx, sy, radius);\n            } else {\n              _value = ctx.createLinearGradient(sx, sy, ex, ey);\n            }\n            for (const {\n              stop,\n              color\n            } of stops) {\n              _value.addColorStop(stop, _colorStyle(color));\n            }\n            this._value = _value;\n            this._gradient = null;\n          }\n          switch (_style) {\n            case stroke:\n              ctx.strokeStyle = _value;\n              ctx.lineWidth = this._thickness;\n              ctx.lineCap = this._cap;\n              ctx.lineJoin = this._join;\n              ctx.stroke(path._path2D);\n              break;\n            case fill:\n              ctx.fillStyle = _value;\n              ctx.fill(path._path2D, path._fillRule === evenOdd ? 'evenodd' : 'nonzero');\n              break;\n          }\n        }\n      });\n      Module.CanvasRenderer = Renderer.extend(\"Renderer\", {\n        __construct: function (ctx) {\n          this.__parent.__construct.call(this);\n          this._ctx = ctx;\n        },\n        save: function () {\n          this._ctx.save();\n        },\n        restore: function () {\n          this._ctx.restore();\n        },\n        transform: function (matrix) {\n          this._ctx.transform(matrix.xx, matrix.xy, matrix.yx, matrix.yy, matrix.tx, matrix.ty);\n        },\n        drawPath: function (path, paint) {\n          paint.draw(this._ctx, path);\n        },\n        clipPath: function (path) {\n          this._ctx.clip(path._path2D, path._fillRule === evenOdd ? 'evenodd' : 'nonzero');\n        }\n      });\n      Module.renderFactory = {\n        makeRenderPaint: function () {\n          return new CanvasRenderPaint();\n        },\n        makeRenderPath: function () {\n          return new CanvasRenderPath();\n        }\n      };\n    };\n    return Rive.ready;\n  };\n}();\nexport default Rive;","map":{"version":3,"names":["Rive","_scriptDir","document","currentScript","src","undefined","__filename","Module","readyPromiseResolve","readyPromiseReject","Promise","resolve","reject","moduleOverrides","key","hasOwnProperty","arguments_","thisProgram","quit_","status","toThrow","ENVIRONMENT_IS_WEB","ENVIRONMENT_IS_WORKER","ENVIRONMENT_IS_NODE","ENVIRONMENT_IS_SHELL","window","importScripts","process","versions","node","scriptDirectory","locateFile","path","read_","readAsync","readBinary","setWindowTitle","nodeFS","nodePath","require","dirname","__dirname","shell_read","filename","binary","ret","tryParseAsDataURI","toString","buffer","Uint8Array","assert","length","replace","slice","ex","ExitStatus","abort","read","f","data","intArrayToString","readbuffer","scriptArgs","arguments","quit","print","console","log","warn","error","printErr","self","location","href","indexOf","substr","lastIndexOf","url","xhr","XMLHttpRequest","open","send","responseText","err","responseType","response","onload","onerror","title","out","bind","tempRet0","setTempRet0","value","wasmBinary","noExitRuntime","WebAssembly","wasmMemory","ABORT","EXITSTATUS","condition","text","UTF8Decoder","TextDecoder","UTF8ArrayToString","heap","idx","maxBytesToRead","endIdx","endPtr","subarray","decode","str","u0","String","fromCharCode","u1","u2","ch","UTF8ToString","ptr","HEAPU8","stringToUTF8Array","outIdx","maxBytesToWrite","startIdx","i","u","charCodeAt","stringToUTF8","outPtr","lengthBytesUTF8","len","UTF16Decoder","UTF16ToString","maxIdx","HEAPU16","codeUnit","HEAP16","stringToUTF16","startPtr","numCharsToWrite","lengthBytesUTF16","UTF32ToString","utf32","HEAP32","stringToUTF32","trailSurrogate","lengthBytesUTF32","alignUp","x","multiple","HEAP8","HEAPU32","HEAPF32","HEAPF64","updateGlobalBufferAndViews","buf","Int8Array","Int16Array","Int32Array","Uint16Array","Uint32Array","Float32Array","Float64Array","INITIAL_MEMORY","wasmTable","__ATPRERUN__","__ATINIT__","__ATMAIN__","__ATPOSTRUN__","runtimeInitialized","preRun","addOnPreRun","shift","callRuntimeCallbacks","initRuntime","preMain","postRun","addOnPostRun","cb","unshift","addOnInit","runDependencies","runDependencyWatcher","dependenciesFulfilled","addRunDependency","id","removeRunDependency","clearInterval","callback","what","e","RuntimeError","hasPrefix","prefix","prototype","startsWith","dataURIPrefix","isDataURI","fileURIPrefix","isFileURI","wasmBinaryFile","getBinary","file","getBinaryPromise","fetch","credentials","then","catch","createWasm","info","asmLibraryArg","receiveInstance","instance","module","exports","receiveInstantiatedSource","output","instantiateArrayBuffer","receiver","result","instantiate","reason","instantiateAsync","instantiateStreaming","callbacks","func","arg","get","char_0","char_9","makeLegalFunctionName","name","createNamedFunction","body","Function","emval_free_list","emval_handle_array","count_emval_handles","count","get_first_emval","init_emval","__emval_register","handle","pop","refcount","extendError","baseErrorType","errorName","errorClass","message","stack","Error","Object","create","constructor","PureVirtualError","embind_init_charCodes","codes","Array","embind_charCodes","readLatin1String","c","getInheritedInstanceCount","keys","registeredInstances","getLiveInheritedInstances","rv","k","push","deletionQueue","flushPendingDeletes","obj","$$","deleteScheduled","delayFunction","setDelayFunction","fn","init_embind","BindingError","throwBindingError","getBasestPointer","class_","baseClass","upcast","registerInheritedInstance","requireHandle","registeredTypes","getTypeName","type","___getTypeName","_free","requireRegisteredType","rawType","humanName","impl","unregisterInheritedInstance","detachFinalizer","finalizationGroup","runDestructor","smartPtr","smartPtrType","rawDestructor","ptrType","registeredClass","releaseClassHandle","toDelete","attachFinalizer","FinalizationGroup","iter","next","done","register","unregister","__embind_create_inheriting_constructor","constructorName","wrapperType","properties","arraySlice","wrapperPrototype","instancePrototype","baseClassPrototype","baseConstructor","ctor","pureVirtualFunctions","forEach","defineProperty","apply","call","__construct","inner","concat","preservePointerOnDelete","defineProperties","__destruct","p","structRegistrations","runDestructors","destructors","del","simpleReadValueFromPointer","pointer","awaitingDependencies","typeDependencies","InternalError","throwInternalError","whenDependentTypesAreResolved","myTypes","dependentTypes","getTypeConverters","onComplete","typeConverters","myTypeConverters","registerType","unregisteredTypes","registered","dt","__embind_finalize_value_object","structType","reg","rawConstructor","fieldRecords","fields","fieldTypes","map","field","getterReturnType","setterArgumentType","fieldName","getter","getterContext","setter","setterContext","write","o","fromWireType","toWireType","TypeError","destructorFunction","getShiftFromSize","size","registeredInstance","options","ignoreDuplicateRegistrations","__embind_register_bool","trueValue","falseValue","wt","readValueFromPointer","ClassHandle_isAliasOf","other","ClassHandle","leftClass","left","rightClass","right","shallowCopyInternalPointer","throwInstanceAlreadyDeleted","getInstanceTypeName","ClassHandle_clone","clone","getPrototypeOf","ClassHandle_delete","ClassHandle_isDeleted","ClassHandle_deleteLater","init_ClassHandle","registeredPointers","ensureOverloadTable","proto","methodName","overloadTable","prevFunc","argCount","exposePublicSymbol","numArguments","RegisteredClass","getActualType","downcast","upcastPointer","ptrClass","desiredClass","constNoSmartPtrRawPointerToWireType","isReference","_embind_repr","handleClass","genericPointerToWireType","isSmartPointer","isConst","sharingPolicy","clonedHandle","rawShare","nonConstNoSmartPtrRawPointerToWireType","RegisteredPointer_getPointee","rawGetPointee","RegisteredPointer_destructor","RegisteredPointer_deleteObject","downcastPointer","getInheritedInstance","makeClassHandle","record","hasSmartPtrType","hasSmartPtr","RegisteredPointer_fromWireType","rawPointer","getPointee","destructor","makeDefaultHandle","pointeeType","actualType","registeredPointerRecord","toType","constPointerType","pointerType","dp","init_RegisteredPointer","RegisteredPointer","replacePublicSymbol","dynCallLegacy","sig","args","dynCall","getDynCaller","argCache","embind__requireFunction","signature","rawFunction","makeDynCaller","fp","UnboundTypeError","throwUnboundTypeError","types","unboundTypes","seen","visit","join","__embind_register_class","rawPointerType","rawConstPointerType","baseClassRawType","getActualTypeSignature","upcastSignature","downcastSignature","destructorSignature","legalFunctionName","base","basePrototype","constructor_body","referenceConverter","pointerConverter","constPointerConverter","new_","argumentList","dummy","r","craftInvokerFunction","argTypes","classType","cppInvokerFunc","cppTargetFunc","isClassMethodFunc","needsDestructorStack","returns","argsList","argsListWired","invokerFnBody","dtorStack","args1","args2","paramName","invokerFunction","heap32VectorToArray","firstElement","array","__embind_register_class_class_function","rawClassType","rawArgTypesAddr","invokerSignature","rawInvoker","rawArgTypes","unboundTypesHandler","invokerArgsArray","validateThis","this_","__embind_register_class_class_property","rawFieldType","rawFieldPtr","getterSignature","setterSignature","desc","enumerable","configurable","set","v","fieldType","__embind_register_class_constructor","invoker","unboundTypeHandler","__embind_register_class_function","context","isPureVirtual","method","className","memberFunction","__embind_register_class_property","__emval_decref","__embind_register_emval","enumReadValueFromPointer","signed","__embind_register_enum","isSigned","values","__embind_register_enum_value","rawEnumType","enumValue","enumType","Enum","Value","t","floatReadValueFromPointer","__embind_register_float","__embind_register_function","integerReadValueFromPointer","readS8FromPointer","readU8FromPointer","readS16FromPointer","readU16FromPointer","readS32FromPointer","readU32FromPointer","__embind_register_integer","primitiveType","minRange","maxRange","bitshift","isUnsignedType","__embind_register_memory_view","dataTypeIndex","typeMapping","TA","decodeMemoryView","__embind_register_std_string","stdStringIsUTF8","decodeStartPtr","currentBytePtr","maxRead","stringSegment","a","ArrayBuffer","getLength","valueIsOfTypeString","Uint8ClampedArray","_malloc","charCode","__embind_register_std_wstring","charSize","decodeString","encodeString","getHeap","lengthBytesUTF","HEAP","maxReadBytes","__embind_register_value_object","constructorSignature","__embind_register_value_object_field","__embind_register_void","isVoid","__emval_as","returnType","destructorsRef","rd","__emval_allocateDestructors","emval_symbols","getStringOrSymbol","address","symbol","emval_methodCallers","__emval_call_method","caller","__emval_call_void_method","__emval_addMethodCaller","__emval_lookupTypes","__emval_get_method_caller","retType","signatureName","params","functionName","functionBody","offset","__emval_get_module_property","__emval_get_property","__emval_incref","__emval_new_cstring","__emval_run_destructors","__emval_take_value","argv","_abort","emscripten_realloc_buffer","grow","byteLength","_emscripten_resize_heap","requestedSize","oldSize","maxHeapSize","cutDown","overGrownHeapSize","Math","min","newSize","max","replacement","SYSCALLS","mappings","buffers","printChar","stream","curr","varargs","getStr","get64","low","high","_fd_close","fd","_fd_seek","offset_low","offset_high","whence","newOffset","_fd_write","iov","iovcnt","pnum","num","j","_setTempRet0","$i","ASSERTIONS","chr","decodeBase64","atob","input","keyStr","chr1","chr2","chr3","enc1","enc2","enc3","enc4","charAt","intArrayFromBase64","s","Buffer","from","_","decoded","bytes","asm","___wasm_call_ctors","___embind_register_native_and_builtin_types","dynCall_jiji","calledRun","runCaller","run","doRun","setTimeout","makeMatrix","m2d","m","DOMMatrix","xx","b","xy","yx","d","yy","tx","ty","onRuntimeInitialized","RenderPaintStyle","FillRule","RenderPath","RenderPaint","Renderer","StrokeCap","StrokeJoin","BlendMode","fill","stroke","evenOdd","nonZero","CanvasRenderPath","extend","__parent","_path2D","Path2D","reset","addPath","fillRule","_fillRule","moveTo","y","lineTo","cubicTo","ox","oy","ix","iy","bezierCurveTo","close","closePath","_colorStyle","CanvasRenderPaint","color","_value","thickness","_thickness","miter","_join","round","bevel","cap","butt","_cap","square","style","_style","blendMode","srcOver","_blend","screen","overlay","darken","lighten","colorDodge","colorBurn","hardLight","softLight","difference","exclusion","multiply","hue","saturation","luminosity","linearGradient","sx","sy","ey","_gradient","stops","radialGradient","isRadial","addStop","stop","completeGradient","draw","ctx","globalCompositeOperation","dx","dy","radius","sqrt","createRadialGradient","createLinearGradient","addColorStop","strokeStyle","lineWidth","lineCap","lineJoin","fillStyle","CanvasRenderer","_ctx","save","restore","transform","matrix","drawPath","paint","clipPath","clip","renderFactory","makeRenderPaint","makeRenderPath","ready"],"sources":["I:/poridhi/practice rive/riveapp/node_modules/rive-canvas/rive.mjs"],"sourcesContent":["\nvar Rive = (function() {\n  var _scriptDir = typeof document !== 'undefined' && document.currentScript ? document.currentScript.src : undefined;\n  if (typeof __filename !== 'undefined') _scriptDir = _scriptDir || __filename;\n  return (\nfunction(Rive) {\n  Rive = Rive || {};\n\nnull;\n\nvar Module = typeof Rive !== \"undefined\" ? Rive : {};\n\nvar readyPromiseResolve, readyPromiseReject;\n\nModule[\"ready\"] = new Promise(function(resolve, reject) {\n readyPromiseResolve = resolve;\n readyPromiseReject = reject;\n});\n\nvar moduleOverrides = {};\n\nvar key;\n\nfor (key in Module) {\n if (Module.hasOwnProperty(key)) {\n  moduleOverrides[key] = Module[key];\n }\n}\n\nvar arguments_ = [];\n\nvar thisProgram = \"./this.program\";\n\nvar quit_ = function(status, toThrow) {\n throw toThrow;\n};\n\nvar ENVIRONMENT_IS_WEB = false;\n\nvar ENVIRONMENT_IS_WORKER = false;\n\nvar ENVIRONMENT_IS_NODE = false;\n\nvar ENVIRONMENT_IS_SHELL = false;\n\nENVIRONMENT_IS_WEB = typeof window === \"object\";\n\nENVIRONMENT_IS_WORKER = typeof importScripts === \"function\";\n\nENVIRONMENT_IS_NODE = typeof process === \"object\" && typeof process.versions === \"object\" && typeof process.versions.node === \"string\";\n\nENVIRONMENT_IS_SHELL = !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_WORKER;\n\nvar scriptDirectory = \"\";\n\nfunction locateFile(path) {\n if (Module[\"locateFile\"]) {\n  return Module[\"locateFile\"](path, scriptDirectory);\n }\n return scriptDirectory + path;\n}\n\nvar read_, readAsync, readBinary, setWindowTitle;\n\nvar nodeFS;\n\nvar nodePath;\n\nif (ENVIRONMENT_IS_NODE) {\n if (ENVIRONMENT_IS_WORKER) {\n  scriptDirectory = require(\"path\").dirname(scriptDirectory) + \"/\";\n } else {\n  scriptDirectory = __dirname + \"/\";\n }\n read_ = function shell_read(filename, binary) {\n  var ret = tryParseAsDataURI(filename);\n  if (ret) {\n   return binary ? ret : ret.toString();\n  }\n  if (!nodeFS) nodeFS = require(\"fs\");\n  if (!nodePath) nodePath = require(\"path\");\n  filename = nodePath[\"normalize\"](filename);\n  return nodeFS[\"readFileSync\"](filename, binary ? null : \"utf8\");\n };\n readBinary = function readBinary(filename) {\n  var ret = read_(filename, true);\n  if (!ret.buffer) {\n   ret = new Uint8Array(ret);\n  }\n  assert(ret.buffer);\n  return ret;\n };\n if (process[\"argv\"].length > 1) {\n  thisProgram = process[\"argv\"][1].replace(/\\\\/g, \"/\");\n }\n arguments_ = process[\"argv\"].slice(2);\n process[\"on\"](\"uncaughtException\", function(ex) {\n  if (!(ex instanceof ExitStatus)) {\n   throw ex;\n  }\n });\n process[\"on\"](\"unhandledRejection\", abort);\n quit_ = function(status) {\n  process[\"exit\"](status);\n };\n Module[\"inspect\"] = function() {\n  return \"[Emscripten Module object]\";\n };\n} else if (ENVIRONMENT_IS_SHELL) {\n if (typeof read != \"undefined\") {\n  read_ = function shell_read(f) {\n   var data = tryParseAsDataURI(f);\n   if (data) {\n    return intArrayToString(data);\n   }\n   return read(f);\n  };\n }\n readBinary = function readBinary(f) {\n  var data;\n  data = tryParseAsDataURI(f);\n  if (data) {\n   return data;\n  }\n  if (typeof readbuffer === \"function\") {\n   return new Uint8Array(readbuffer(f));\n  }\n  data = read(f, \"binary\");\n  assert(typeof data === \"object\");\n  return data;\n };\n if (typeof scriptArgs != \"undefined\") {\n  arguments_ = scriptArgs;\n } else if (typeof arguments != \"undefined\") {\n  arguments_ = arguments;\n }\n if (typeof quit === \"function\") {\n  quit_ = function(status) {\n   quit(status);\n  };\n }\n if (typeof print !== \"undefined\") {\n  if (typeof console === \"undefined\") console = {};\n  console.log = print;\n  console.warn = console.error = typeof printErr !== \"undefined\" ? printErr : print;\n }\n} else if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {\n if (ENVIRONMENT_IS_WORKER) {\n  scriptDirectory = self.location.href;\n } else if (typeof document !== \"undefined\" && document.currentScript) {\n  scriptDirectory = document.currentScript.src;\n }\n if (_scriptDir) {\n  scriptDirectory = _scriptDir;\n }\n if (scriptDirectory.indexOf(\"blob:\") !== 0) {\n  scriptDirectory = scriptDirectory.substr(0, scriptDirectory.lastIndexOf(\"/\") + 1);\n } else {\n  scriptDirectory = \"\";\n }\n {\n  read_ = function(url) {\n   try {\n    var xhr = new XMLHttpRequest();\n    xhr.open(\"GET\", url, false);\n    xhr.send(null);\n    return xhr.responseText;\n   } catch (err) {\n    var data = tryParseAsDataURI(url);\n    if (data) {\n     return intArrayToString(data);\n    }\n    throw err;\n   }\n  };\n  if (ENVIRONMENT_IS_WORKER) {\n   readBinary = function(url) {\n    try {\n     var xhr = new XMLHttpRequest();\n     xhr.open(\"GET\", url, false);\n     xhr.responseType = \"arraybuffer\";\n     xhr.send(null);\n     return new Uint8Array(xhr.response);\n    } catch (err) {\n     var data = tryParseAsDataURI(url);\n     if (data) {\n      return data;\n     }\n     throw err;\n    }\n   };\n  }\n  readAsync = function(url, onload, onerror) {\n   var xhr = new XMLHttpRequest();\n   xhr.open(\"GET\", url, true);\n   xhr.responseType = \"arraybuffer\";\n   xhr.onload = function() {\n    if (xhr.status == 200 || xhr.status == 0 && xhr.response) {\n     onload(xhr.response);\n     return;\n    }\n    var data = tryParseAsDataURI(url);\n    if (data) {\n     onload(data.buffer);\n     return;\n    }\n    onerror();\n   };\n   xhr.onerror = onerror;\n   xhr.send(null);\n  };\n }\n setWindowTitle = function(title) {\n  document.title = title;\n };\n} else {}\n\nvar out = Module[\"print\"] || console.log.bind(console);\n\nvar err = Module[\"printErr\"] || console.warn.bind(console);\n\nfor (key in moduleOverrides) {\n if (moduleOverrides.hasOwnProperty(key)) {\n  Module[key] = moduleOverrides[key];\n }\n}\n\nmoduleOverrides = null;\n\nif (Module[\"arguments\"]) arguments_ = Module[\"arguments\"];\n\nif (Module[\"thisProgram\"]) thisProgram = Module[\"thisProgram\"];\n\nif (Module[\"quit\"]) quit_ = Module[\"quit\"];\n\nvar tempRet0 = 0;\n\nvar setTempRet0 = function(value) {\n tempRet0 = value;\n};\n\nvar wasmBinary;\n\nif (Module[\"wasmBinary\"]) wasmBinary = Module[\"wasmBinary\"];\n\nvar noExitRuntime = Module[\"noExitRuntime\"] || true;\n\nif (typeof WebAssembly !== \"object\") {\n abort(\"no native wasm support detected\");\n}\n\nvar wasmMemory;\n\nvar ABORT = false;\n\nvar EXITSTATUS;\n\nfunction assert(condition, text) {\n if (!condition) {\n  abort(\"Assertion failed: \" + text);\n }\n}\n\nvar UTF8Decoder = typeof TextDecoder !== \"undefined\" ? new TextDecoder(\"utf8\") : undefined;\n\nfunction UTF8ArrayToString(heap, idx, maxBytesToRead) {\n var endIdx = idx + maxBytesToRead;\n var endPtr = idx;\n while (heap[endPtr] && !(endPtr >= endIdx)) ++endPtr;\n if (endPtr - idx > 16 && heap.subarray && UTF8Decoder) {\n  return UTF8Decoder.decode(heap.subarray(idx, endPtr));\n } else {\n  var str = \"\";\n  while (idx < endPtr) {\n   var u0 = heap[idx++];\n   if (!(u0 & 128)) {\n    str += String.fromCharCode(u0);\n    continue;\n   }\n   var u1 = heap[idx++] & 63;\n   if ((u0 & 224) == 192) {\n    str += String.fromCharCode((u0 & 31) << 6 | u1);\n    continue;\n   }\n   var u2 = heap[idx++] & 63;\n   if ((u0 & 240) == 224) {\n    u0 = (u0 & 15) << 12 | u1 << 6 | u2;\n   } else {\n    u0 = (u0 & 7) << 18 | u1 << 12 | u2 << 6 | heap[idx++] & 63;\n   }\n   if (u0 < 65536) {\n    str += String.fromCharCode(u0);\n   } else {\n    var ch = u0 - 65536;\n    str += String.fromCharCode(55296 | ch >> 10, 56320 | ch & 1023);\n   }\n  }\n }\n return str;\n}\n\nfunction UTF8ToString(ptr, maxBytesToRead) {\n return ptr ? UTF8ArrayToString(HEAPU8, ptr, maxBytesToRead) : \"\";\n}\n\nfunction stringToUTF8Array(str, heap, outIdx, maxBytesToWrite) {\n if (!(maxBytesToWrite > 0)) return 0;\n var startIdx = outIdx;\n var endIdx = outIdx + maxBytesToWrite - 1;\n for (var i = 0; i < str.length; ++i) {\n  var u = str.charCodeAt(i);\n  if (u >= 55296 && u <= 57343) {\n   var u1 = str.charCodeAt(++i);\n   u = 65536 + ((u & 1023) << 10) | u1 & 1023;\n  }\n  if (u <= 127) {\n   if (outIdx >= endIdx) break;\n   heap[outIdx++] = u;\n  } else if (u <= 2047) {\n   if (outIdx + 1 >= endIdx) break;\n   heap[outIdx++] = 192 | u >> 6;\n   heap[outIdx++] = 128 | u & 63;\n  } else if (u <= 65535) {\n   if (outIdx + 2 >= endIdx) break;\n   heap[outIdx++] = 224 | u >> 12;\n   heap[outIdx++] = 128 | u >> 6 & 63;\n   heap[outIdx++] = 128 | u & 63;\n  } else {\n   if (outIdx + 3 >= endIdx) break;\n   heap[outIdx++] = 240 | u >> 18;\n   heap[outIdx++] = 128 | u >> 12 & 63;\n   heap[outIdx++] = 128 | u >> 6 & 63;\n   heap[outIdx++] = 128 | u & 63;\n  }\n }\n heap[outIdx] = 0;\n return outIdx - startIdx;\n}\n\nfunction stringToUTF8(str, outPtr, maxBytesToWrite) {\n return stringToUTF8Array(str, HEAPU8, outPtr, maxBytesToWrite);\n}\n\nfunction lengthBytesUTF8(str) {\n var len = 0;\n for (var i = 0; i < str.length; ++i) {\n  var u = str.charCodeAt(i);\n  if (u >= 55296 && u <= 57343) u = 65536 + ((u & 1023) << 10) | str.charCodeAt(++i) & 1023;\n  if (u <= 127) ++len; else if (u <= 2047) len += 2; else if (u <= 65535) len += 3; else len += 4;\n }\n return len;\n}\n\nvar UTF16Decoder = typeof TextDecoder !== \"undefined\" ? new TextDecoder(\"utf-16le\") : undefined;\n\nfunction UTF16ToString(ptr, maxBytesToRead) {\n var endPtr = ptr;\n var idx = endPtr >> 1;\n var maxIdx = idx + maxBytesToRead / 2;\n while (!(idx >= maxIdx) && HEAPU16[idx]) ++idx;\n endPtr = idx << 1;\n if (endPtr - ptr > 32 && UTF16Decoder) {\n  return UTF16Decoder.decode(HEAPU8.subarray(ptr, endPtr));\n } else {\n  var str = \"\";\n  for (var i = 0; !(i >= maxBytesToRead / 2); ++i) {\n   var codeUnit = HEAP16[ptr + i * 2 >> 1];\n   if (codeUnit == 0) break;\n   str += String.fromCharCode(codeUnit);\n  }\n  return str;\n }\n}\n\nfunction stringToUTF16(str, outPtr, maxBytesToWrite) {\n if (maxBytesToWrite === undefined) {\n  maxBytesToWrite = 2147483647;\n }\n if (maxBytesToWrite < 2) return 0;\n maxBytesToWrite -= 2;\n var startPtr = outPtr;\n var numCharsToWrite = maxBytesToWrite < str.length * 2 ? maxBytesToWrite / 2 : str.length;\n for (var i = 0; i < numCharsToWrite; ++i) {\n  var codeUnit = str.charCodeAt(i);\n  HEAP16[outPtr >> 1] = codeUnit;\n  outPtr += 2;\n }\n HEAP16[outPtr >> 1] = 0;\n return outPtr - startPtr;\n}\n\nfunction lengthBytesUTF16(str) {\n return str.length * 2;\n}\n\nfunction UTF32ToString(ptr, maxBytesToRead) {\n var i = 0;\n var str = \"\";\n while (!(i >= maxBytesToRead / 4)) {\n  var utf32 = HEAP32[ptr + i * 4 >> 2];\n  if (utf32 == 0) break;\n  ++i;\n  if (utf32 >= 65536) {\n   var ch = utf32 - 65536;\n   str += String.fromCharCode(55296 | ch >> 10, 56320 | ch & 1023);\n  } else {\n   str += String.fromCharCode(utf32);\n  }\n }\n return str;\n}\n\nfunction stringToUTF32(str, outPtr, maxBytesToWrite) {\n if (maxBytesToWrite === undefined) {\n  maxBytesToWrite = 2147483647;\n }\n if (maxBytesToWrite < 4) return 0;\n var startPtr = outPtr;\n var endPtr = startPtr + maxBytesToWrite - 4;\n for (var i = 0; i < str.length; ++i) {\n  var codeUnit = str.charCodeAt(i);\n  if (codeUnit >= 55296 && codeUnit <= 57343) {\n   var trailSurrogate = str.charCodeAt(++i);\n   codeUnit = 65536 + ((codeUnit & 1023) << 10) | trailSurrogate & 1023;\n  }\n  HEAP32[outPtr >> 2] = codeUnit;\n  outPtr += 4;\n  if (outPtr + 4 > endPtr) break;\n }\n HEAP32[outPtr >> 2] = 0;\n return outPtr - startPtr;\n}\n\nfunction lengthBytesUTF32(str) {\n var len = 0;\n for (var i = 0; i < str.length; ++i) {\n  var codeUnit = str.charCodeAt(i);\n  if (codeUnit >= 55296 && codeUnit <= 57343) ++i;\n  len += 4;\n }\n return len;\n}\n\nfunction alignUp(x, multiple) {\n if (x % multiple > 0) {\n  x += multiple - x % multiple;\n }\n return x;\n}\n\nvar buffer, HEAP8, HEAPU8, HEAP16, HEAPU16, HEAP32, HEAPU32, HEAPF32, HEAPF64;\n\nfunction updateGlobalBufferAndViews(buf) {\n buffer = buf;\n Module[\"HEAP8\"] = HEAP8 = new Int8Array(buf);\n Module[\"HEAP16\"] = HEAP16 = new Int16Array(buf);\n Module[\"HEAP32\"] = HEAP32 = new Int32Array(buf);\n Module[\"HEAPU8\"] = HEAPU8 = new Uint8Array(buf);\n Module[\"HEAPU16\"] = HEAPU16 = new Uint16Array(buf);\n Module[\"HEAPU32\"] = HEAPU32 = new Uint32Array(buf);\n Module[\"HEAPF32\"] = HEAPF32 = new Float32Array(buf);\n Module[\"HEAPF64\"] = HEAPF64 = new Float64Array(buf);\n}\n\nvar INITIAL_MEMORY = Module[\"INITIAL_MEMORY\"] || 16777216;\n\nvar wasmTable;\n\nvar __ATPRERUN__ = [];\n\nvar __ATINIT__ = [];\n\nvar __ATMAIN__ = [];\n\nvar __ATPOSTRUN__ = [];\n\nvar runtimeInitialized = false;\n\nfunction preRun() {\n if (Module[\"preRun\"]) {\n  if (typeof Module[\"preRun\"] == \"function\") Module[\"preRun\"] = [ Module[\"preRun\"] ];\n  while (Module[\"preRun\"].length) {\n   addOnPreRun(Module[\"preRun\"].shift());\n  }\n }\n callRuntimeCallbacks(__ATPRERUN__);\n}\n\nfunction initRuntime() {\n runtimeInitialized = true;\n callRuntimeCallbacks(__ATINIT__);\n}\n\nfunction preMain() {\n callRuntimeCallbacks(__ATMAIN__);\n}\n\nfunction postRun() {\n if (Module[\"postRun\"]) {\n  if (typeof Module[\"postRun\"] == \"function\") Module[\"postRun\"] = [ Module[\"postRun\"] ];\n  while (Module[\"postRun\"].length) {\n   addOnPostRun(Module[\"postRun\"].shift());\n  }\n }\n callRuntimeCallbacks(__ATPOSTRUN__);\n}\n\nfunction addOnPreRun(cb) {\n __ATPRERUN__.unshift(cb);\n}\n\nfunction addOnInit(cb) {\n __ATINIT__.unshift(cb);\n}\n\nfunction addOnPostRun(cb) {\n __ATPOSTRUN__.unshift(cb);\n}\n\nvar runDependencies = 0;\n\nvar runDependencyWatcher = null;\n\nvar dependenciesFulfilled = null;\n\nfunction addRunDependency(id) {\n runDependencies++;\n if (Module[\"monitorRunDependencies\"]) {\n  Module[\"monitorRunDependencies\"](runDependencies);\n }\n}\n\nfunction removeRunDependency(id) {\n runDependencies--;\n if (Module[\"monitorRunDependencies\"]) {\n  Module[\"monitorRunDependencies\"](runDependencies);\n }\n if (runDependencies == 0) {\n  if (runDependencyWatcher !== null) {\n   clearInterval(runDependencyWatcher);\n   runDependencyWatcher = null;\n  }\n  if (dependenciesFulfilled) {\n   var callback = dependenciesFulfilled;\n   dependenciesFulfilled = null;\n   callback();\n  }\n }\n}\n\nModule[\"preloadedImages\"] = {};\n\nModule[\"preloadedAudios\"] = {};\n\nfunction abort(what) {\n if (Module[\"onAbort\"]) {\n  Module[\"onAbort\"](what);\n }\n what += \"\";\n err(what);\n ABORT = true;\n EXITSTATUS = 1;\n what = \"abort(\" + what + \"). Build with -s ASSERTIONS=1 for more info.\";\n var e = new WebAssembly.RuntimeError(what);\n readyPromiseReject(e);\n throw e;\n}\n\nfunction hasPrefix(str, prefix) {\n return String.prototype.startsWith ? str.startsWith(prefix) : str.indexOf(prefix) === 0;\n}\n\nvar dataURIPrefix = \"data:application/octet-stream;base64,\";\n\nfunction isDataURI(filename) {\n return hasPrefix(filename, dataURIPrefix);\n}\n\nvar fileURIPrefix = \"file://\";\n\nfunction isFileURI(filename) {\n return hasPrefix(filename, fileURIPrefix);\n}\n\nvar wasmBinaryFile = \"data:application/octet-stream;base64,\";\n\nif (!isDataURI(wasmBinaryFile)) {\n wasmBinaryFile = locateFile(wasmBinaryFile);\n}\n\nfunction getBinary(file) {\n try {\n  if (file == wasmBinaryFile && wasmBinary) {\n   return new Uint8Array(wasmBinary);\n  }\n  var binary = tryParseAsDataURI(file);\n  if (binary) {\n   return binary;\n  }\n  if (readBinary) {\n   return readBinary(file);\n  } else {\n   throw \"both async and sync fetching of the wasm failed\";\n  }\n } catch (err) {\n  abort(err);\n }\n}\n\nfunction getBinaryPromise() {\n if (!wasmBinary && (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER)) {\n  if (typeof fetch === \"function\" && !isFileURI(wasmBinaryFile)) {\n   return fetch(wasmBinaryFile, {\n    credentials: \"same-origin\"\n   }).then(function(response) {\n    if (!response[\"ok\"]) {\n     throw \"failed to load wasm binary file at '\" + wasmBinaryFile + \"'\";\n    }\n    return response[\"arrayBuffer\"]();\n   }).catch(function() {\n    return getBinary(wasmBinaryFile);\n   });\n  } else {\n   if (readAsync) {\n    return new Promise(function(resolve, reject) {\n     readAsync(wasmBinaryFile, function(response) {\n      resolve(new Uint8Array(response));\n     }, reject);\n    });\n   }\n  }\n }\n return Promise.resolve().then(function() {\n  return getBinary(wasmBinaryFile);\n });\n}\n\nfunction createWasm() {\n var info = {\n  \"a\": asmLibraryArg\n };\n function receiveInstance(instance, module) {\n  var exports = instance.exports;\n  Module[\"asm\"] = exports;\n  wasmMemory = Module[\"asm\"][\"M\"];\n  updateGlobalBufferAndViews(wasmMemory.buffer);\n  wasmTable = Module[\"asm\"][\"O\"];\n  addOnInit(Module[\"asm\"][\"N\"]);\n  removeRunDependency(\"wasm-instantiate\");\n }\n addRunDependency(\"wasm-instantiate\");\n function receiveInstantiatedSource(output) {\n  receiveInstance(output[\"instance\"]);\n }\n function instantiateArrayBuffer(receiver) {\n  return getBinaryPromise().then(function(binary) {\n   var result = WebAssembly.instantiate(binary, info);\n   return result;\n  }).then(receiver, function(reason) {\n   err(\"failed to asynchronously prepare wasm: \" + reason);\n   abort(reason);\n  });\n }\n function instantiateAsync() {\n  if (!wasmBinary && typeof WebAssembly.instantiateStreaming === \"function\" && !isDataURI(wasmBinaryFile) && !isFileURI(wasmBinaryFile) && typeof fetch === \"function\") {\n   return fetch(wasmBinaryFile, {\n    credentials: \"same-origin\"\n   }).then(function(response) {\n    var result = WebAssembly.instantiateStreaming(response, info);\n    return result.then(receiveInstantiatedSource, function(reason) {\n     err(\"wasm streaming compile failed: \" + reason);\n     err(\"falling back to ArrayBuffer instantiation\");\n     return instantiateArrayBuffer(receiveInstantiatedSource);\n    });\n   });\n  } else {\n   return instantiateArrayBuffer(receiveInstantiatedSource);\n  }\n }\n if (Module[\"instantiateWasm\"]) {\n  try {\n   var exports = Module[\"instantiateWasm\"](info, receiveInstance);\n   return exports;\n  } catch (e) {\n   err(\"Module.instantiateWasm callback failed with error: \" + e);\n   return false;\n  }\n }\n instantiateAsync().catch(readyPromiseReject);\n return {};\n}\n\nfunction callRuntimeCallbacks(callbacks) {\n while (callbacks.length > 0) {\n  var callback = callbacks.shift();\n  if (typeof callback == \"function\") {\n   callback(Module);\n   continue;\n  }\n  var func = callback.func;\n  if (typeof func === \"number\") {\n   if (callback.arg === undefined) {\n    wasmTable.get(func)();\n   } else {\n    wasmTable.get(func)(callback.arg);\n   }\n  } else {\n   func(callback.arg === undefined ? null : callback.arg);\n  }\n }\n}\n\nvar char_0 = 48;\n\nvar char_9 = 57;\n\nfunction makeLegalFunctionName(name) {\n if (undefined === name) {\n  return \"_unknown\";\n }\n name = name.replace(/[^a-zA-Z0-9_]/g, \"$\");\n var f = name.charCodeAt(0);\n if (f >= char_0 && f <= char_9) {\n  return \"_\" + name;\n } else {\n  return name;\n }\n}\n\nfunction createNamedFunction(name, body) {\n name = makeLegalFunctionName(name);\n return new Function(\"body\", \"return function \" + name + \"() {\\n\" + '    \"use strict\";' + \"    return body.apply(this, arguments);\\n\" + \"};\\n\")(body);\n}\n\nvar emval_free_list = [];\n\nvar emval_handle_array = [ {}, {\n value: undefined\n}, {\n value: null\n}, {\n value: true\n}, {\n value: false\n} ];\n\nfunction count_emval_handles() {\n var count = 0;\n for (var i = 5; i < emval_handle_array.length; ++i) {\n  if (emval_handle_array[i] !== undefined) {\n   ++count;\n  }\n }\n return count;\n}\n\nfunction get_first_emval() {\n for (var i = 5; i < emval_handle_array.length; ++i) {\n  if (emval_handle_array[i] !== undefined) {\n   return emval_handle_array[i];\n  }\n }\n return null;\n}\n\nfunction init_emval() {\n Module[\"count_emval_handles\"] = count_emval_handles;\n Module[\"get_first_emval\"] = get_first_emval;\n}\n\nfunction __emval_register(value) {\n switch (value) {\n case undefined:\n  {\n   return 1;\n  }\n\n case null:\n  {\n   return 2;\n  }\n\n case true:\n  {\n   return 3;\n  }\n\n case false:\n  {\n   return 4;\n  }\n\n default:\n  {\n   var handle = emval_free_list.length ? emval_free_list.pop() : emval_handle_array.length;\n   emval_handle_array[handle] = {\n    refcount: 1,\n    value: value\n   };\n   return handle;\n  }\n }\n}\n\nfunction extendError(baseErrorType, errorName) {\n var errorClass = createNamedFunction(errorName, function(message) {\n  this.name = errorName;\n  this.message = message;\n  var stack = new Error(message).stack;\n  if (stack !== undefined) {\n   this.stack = this.toString() + \"\\n\" + stack.replace(/^Error(:[^\\n]*)?\\n/, \"\");\n  }\n });\n errorClass.prototype = Object.create(baseErrorType.prototype);\n errorClass.prototype.constructor = errorClass;\n errorClass.prototype.toString = function() {\n  if (this.message === undefined) {\n   return this.name;\n  } else {\n   return this.name + \": \" + this.message;\n  }\n };\n return errorClass;\n}\n\nvar PureVirtualError = undefined;\n\nfunction embind_init_charCodes() {\n var codes = new Array(256);\n for (var i = 0; i < 256; ++i) {\n  codes[i] = String.fromCharCode(i);\n }\n embind_charCodes = codes;\n}\n\nvar embind_charCodes = undefined;\n\nfunction readLatin1String(ptr) {\n var ret = \"\";\n var c = ptr;\n while (HEAPU8[c]) {\n  ret += embind_charCodes[HEAPU8[c++]];\n }\n return ret;\n}\n\nfunction getInheritedInstanceCount() {\n return Object.keys(registeredInstances).length;\n}\n\nfunction getLiveInheritedInstances() {\n var rv = [];\n for (var k in registeredInstances) {\n  if (registeredInstances.hasOwnProperty(k)) {\n   rv.push(registeredInstances[k]);\n  }\n }\n return rv;\n}\n\nvar deletionQueue = [];\n\nfunction flushPendingDeletes() {\n while (deletionQueue.length) {\n  var obj = deletionQueue.pop();\n  obj.$$.deleteScheduled = false;\n  obj[\"delete\"]();\n }\n}\n\nvar delayFunction = undefined;\n\nfunction setDelayFunction(fn) {\n delayFunction = fn;\n if (deletionQueue.length && delayFunction) {\n  delayFunction(flushPendingDeletes);\n }\n}\n\nfunction init_embind() {\n Module[\"getInheritedInstanceCount\"] = getInheritedInstanceCount;\n Module[\"getLiveInheritedInstances\"] = getLiveInheritedInstances;\n Module[\"flushPendingDeletes\"] = flushPendingDeletes;\n Module[\"setDelayFunction\"] = setDelayFunction;\n}\n\nvar registeredInstances = {};\n\nvar BindingError = undefined;\n\nfunction throwBindingError(message) {\n throw new BindingError(message);\n}\n\nfunction getBasestPointer(class_, ptr) {\n if (ptr === undefined) {\n  throwBindingError(\"ptr should not be undefined\");\n }\n while (class_.baseClass) {\n  ptr = class_.upcast(ptr);\n  class_ = class_.baseClass;\n }\n return ptr;\n}\n\nfunction registerInheritedInstance(class_, ptr, instance) {\n ptr = getBasestPointer(class_, ptr);\n if (registeredInstances.hasOwnProperty(ptr)) {\n  throwBindingError(\"Tried to register registered instance: \" + ptr);\n } else {\n  registeredInstances[ptr] = instance;\n }\n}\n\nfunction requireHandle(handle) {\n if (!handle) {\n  throwBindingError(\"Cannot use deleted val. handle = \" + handle);\n }\n return emval_handle_array[handle].value;\n}\n\nvar registeredTypes = {};\n\nfunction getTypeName(type) {\n var ptr = ___getTypeName(type);\n var rv = readLatin1String(ptr);\n _free(ptr);\n return rv;\n}\n\nfunction requireRegisteredType(rawType, humanName) {\n var impl = registeredTypes[rawType];\n if (undefined === impl) {\n  throwBindingError(humanName + \" has unknown type \" + getTypeName(rawType));\n }\n return impl;\n}\n\nfunction unregisterInheritedInstance(class_, ptr) {\n ptr = getBasestPointer(class_, ptr);\n if (registeredInstances.hasOwnProperty(ptr)) {\n  delete registeredInstances[ptr];\n } else {\n  throwBindingError(\"Tried to unregister unregistered instance: \" + ptr);\n }\n}\n\nfunction detachFinalizer(handle) {}\n\nvar finalizationGroup = false;\n\nfunction runDestructor($$) {\n if ($$.smartPtr) {\n  $$.smartPtrType.rawDestructor($$.smartPtr);\n } else {\n  $$.ptrType.registeredClass.rawDestructor($$.ptr);\n }\n}\n\nfunction releaseClassHandle($$) {\n $$.count.value -= 1;\n var toDelete = 0 === $$.count.value;\n if (toDelete) {\n  runDestructor($$);\n }\n}\n\nfunction attachFinalizer(handle) {\n if (\"undefined\" === typeof FinalizationGroup) {\n  attachFinalizer = function(handle) {\n   return handle;\n  };\n  return handle;\n }\n finalizationGroup = new FinalizationGroup(function(iter) {\n  for (var result = iter.next(); !result.done; result = iter.next()) {\n   var $$ = result.value;\n   if (!$$.ptr) {\n    console.warn(\"object already deleted: \" + $$.ptr);\n   } else {\n    releaseClassHandle($$);\n   }\n  }\n });\n attachFinalizer = function(handle) {\n  finalizationGroup.register(handle, handle.$$, handle.$$);\n  return handle;\n };\n detachFinalizer = function(handle) {\n  finalizationGroup.unregister(handle.$$);\n };\n return attachFinalizer(handle);\n}\n\nfunction __embind_create_inheriting_constructor(constructorName, wrapperType, properties) {\n constructorName = readLatin1String(constructorName);\n wrapperType = requireRegisteredType(wrapperType, \"wrapper\");\n properties = requireHandle(properties);\n var arraySlice = [].slice;\n var registeredClass = wrapperType.registeredClass;\n var wrapperPrototype = registeredClass.instancePrototype;\n var baseClass = registeredClass.baseClass;\n var baseClassPrototype = baseClass.instancePrototype;\n var baseConstructor = registeredClass.baseClass.constructor;\n var ctor = createNamedFunction(constructorName, function() {\n  registeredClass.baseClass.pureVirtualFunctions.forEach(function(name) {\n   if (this[name] === baseClassPrototype[name]) {\n    throw new PureVirtualError(\"Pure virtual function \" + name + \" must be implemented in JavaScript\");\n   }\n  }.bind(this));\n  Object.defineProperty(this, \"__parent\", {\n   value: wrapperPrototype\n  });\n  this[\"__construct\"].apply(this, arraySlice.call(arguments));\n });\n wrapperPrototype[\"__construct\"] = function __construct() {\n  if (this === wrapperPrototype) {\n   throwBindingError(\"Pass correct 'this' to __construct\");\n  }\n  var inner = baseConstructor[\"implement\"].apply(undefined, [ this ].concat(arraySlice.call(arguments)));\n  detachFinalizer(inner);\n  var $$ = inner.$$;\n  inner[\"notifyOnDestruction\"]();\n  $$.preservePointerOnDelete = true;\n  Object.defineProperties(this, {\n   $$: {\n    value: $$\n   }\n  });\n  attachFinalizer(this);\n  registerInheritedInstance(registeredClass, $$.ptr, this);\n };\n wrapperPrototype[\"__destruct\"] = function __destruct() {\n  if (this === wrapperPrototype) {\n   throwBindingError(\"Pass correct 'this' to __destruct\");\n  }\n  detachFinalizer(this);\n  unregisterInheritedInstance(registeredClass, this.$$.ptr);\n };\n ctor.prototype = Object.create(wrapperPrototype);\n for (var p in properties) {\n  ctor.prototype[p] = properties[p];\n }\n return __emval_register(ctor);\n}\n\nvar structRegistrations = {};\n\nfunction runDestructors(destructors) {\n while (destructors.length) {\n  var ptr = destructors.pop();\n  var del = destructors.pop();\n  del(ptr);\n }\n}\n\nfunction simpleReadValueFromPointer(pointer) {\n return this[\"fromWireType\"](HEAPU32[pointer >> 2]);\n}\n\nvar awaitingDependencies = {};\n\nvar typeDependencies = {};\n\nvar InternalError = undefined;\n\nfunction throwInternalError(message) {\n throw new InternalError(message);\n}\n\nfunction whenDependentTypesAreResolved(myTypes, dependentTypes, getTypeConverters) {\n myTypes.forEach(function(type) {\n  typeDependencies[type] = dependentTypes;\n });\n function onComplete(typeConverters) {\n  var myTypeConverters = getTypeConverters(typeConverters);\n  if (myTypeConverters.length !== myTypes.length) {\n   throwInternalError(\"Mismatched type converter count\");\n  }\n  for (var i = 0; i < myTypes.length; ++i) {\n   registerType(myTypes[i], myTypeConverters[i]);\n  }\n }\n var typeConverters = new Array(dependentTypes.length);\n var unregisteredTypes = [];\n var registered = 0;\n dependentTypes.forEach(function(dt, i) {\n  if (registeredTypes.hasOwnProperty(dt)) {\n   typeConverters[i] = registeredTypes[dt];\n  } else {\n   unregisteredTypes.push(dt);\n   if (!awaitingDependencies.hasOwnProperty(dt)) {\n    awaitingDependencies[dt] = [];\n   }\n   awaitingDependencies[dt].push(function() {\n    typeConverters[i] = registeredTypes[dt];\n    ++registered;\n    if (registered === unregisteredTypes.length) {\n     onComplete(typeConverters);\n    }\n   });\n  }\n });\n if (0 === unregisteredTypes.length) {\n  onComplete(typeConverters);\n }\n}\n\nfunction __embind_finalize_value_object(structType) {\n var reg = structRegistrations[structType];\n delete structRegistrations[structType];\n var rawConstructor = reg.rawConstructor;\n var rawDestructor = reg.rawDestructor;\n var fieldRecords = reg.fields;\n var fieldTypes = fieldRecords.map(function(field) {\n  return field.getterReturnType;\n }).concat(fieldRecords.map(function(field) {\n  return field.setterArgumentType;\n }));\n whenDependentTypesAreResolved([ structType ], fieldTypes, function(fieldTypes) {\n  var fields = {};\n  fieldRecords.forEach(function(field, i) {\n   var fieldName = field.fieldName;\n   var getterReturnType = fieldTypes[i];\n   var getter = field.getter;\n   var getterContext = field.getterContext;\n   var setterArgumentType = fieldTypes[i + fieldRecords.length];\n   var setter = field.setter;\n   var setterContext = field.setterContext;\n   fields[fieldName] = {\n    read: function(ptr) {\n     return getterReturnType[\"fromWireType\"](getter(getterContext, ptr));\n    },\n    write: function(ptr, o) {\n     var destructors = [];\n     setter(setterContext, ptr, setterArgumentType[\"toWireType\"](destructors, o));\n     runDestructors(destructors);\n    }\n   };\n  });\n  return [ {\n   name: reg.name,\n   \"fromWireType\": function(ptr) {\n    var rv = {};\n    for (var i in fields) {\n     rv[i] = fields[i].read(ptr);\n    }\n    rawDestructor(ptr);\n    return rv;\n   },\n   \"toWireType\": function(destructors, o) {\n    for (var fieldName in fields) {\n     if (!(fieldName in o)) {\n      throw new TypeError('Missing field:  \"' + fieldName + '\"');\n     }\n    }\n    var ptr = rawConstructor();\n    for (fieldName in fields) {\n     fields[fieldName].write(ptr, o[fieldName]);\n    }\n    if (destructors !== null) {\n     destructors.push(rawDestructor, ptr);\n    }\n    return ptr;\n   },\n   \"argPackAdvance\": 8,\n   \"readValueFromPointer\": simpleReadValueFromPointer,\n   destructorFunction: rawDestructor\n  } ];\n });\n}\n\nfunction getShiftFromSize(size) {\n switch (size) {\n case 1:\n  return 0;\n\n case 2:\n  return 1;\n\n case 4:\n  return 2;\n\n case 8:\n  return 3;\n\n default:\n  throw new TypeError(\"Unknown type size: \" + size);\n }\n}\n\nfunction registerType(rawType, registeredInstance, options) {\n options = options || {};\n if (!(\"argPackAdvance\" in registeredInstance)) {\n  throw new TypeError(\"registerType registeredInstance requires argPackAdvance\");\n }\n var name = registeredInstance.name;\n if (!rawType) {\n  throwBindingError('type \"' + name + '\" must have a positive integer typeid pointer');\n }\n if (registeredTypes.hasOwnProperty(rawType)) {\n  if (options.ignoreDuplicateRegistrations) {\n   return;\n  } else {\n   throwBindingError(\"Cannot register type '\" + name + \"' twice\");\n  }\n }\n registeredTypes[rawType] = registeredInstance;\n delete typeDependencies[rawType];\n if (awaitingDependencies.hasOwnProperty(rawType)) {\n  var callbacks = awaitingDependencies[rawType];\n  delete awaitingDependencies[rawType];\n  callbacks.forEach(function(cb) {\n   cb();\n  });\n }\n}\n\nfunction __embind_register_bool(rawType, name, size, trueValue, falseValue) {\n var shift = getShiftFromSize(size);\n name = readLatin1String(name);\n registerType(rawType, {\n  name: name,\n  \"fromWireType\": function(wt) {\n   return !!wt;\n  },\n  \"toWireType\": function(destructors, o) {\n   return o ? trueValue : falseValue;\n  },\n  \"argPackAdvance\": 8,\n  \"readValueFromPointer\": function(pointer) {\n   var heap;\n   if (size === 1) {\n    heap = HEAP8;\n   } else if (size === 2) {\n    heap = HEAP16;\n   } else if (size === 4) {\n    heap = HEAP32;\n   } else {\n    throw new TypeError(\"Unknown boolean type size: \" + name);\n   }\n   return this[\"fromWireType\"](heap[pointer >> shift]);\n  },\n  destructorFunction: null\n });\n}\n\nfunction ClassHandle_isAliasOf(other) {\n if (!(this instanceof ClassHandle)) {\n  return false;\n }\n if (!(other instanceof ClassHandle)) {\n  return false;\n }\n var leftClass = this.$$.ptrType.registeredClass;\n var left = this.$$.ptr;\n var rightClass = other.$$.ptrType.registeredClass;\n var right = other.$$.ptr;\n while (leftClass.baseClass) {\n  left = leftClass.upcast(left);\n  leftClass = leftClass.baseClass;\n }\n while (rightClass.baseClass) {\n  right = rightClass.upcast(right);\n  rightClass = rightClass.baseClass;\n }\n return leftClass === rightClass && left === right;\n}\n\nfunction shallowCopyInternalPointer(o) {\n return {\n  count: o.count,\n  deleteScheduled: o.deleteScheduled,\n  preservePointerOnDelete: o.preservePointerOnDelete,\n  ptr: o.ptr,\n  ptrType: o.ptrType,\n  smartPtr: o.smartPtr,\n  smartPtrType: o.smartPtrType\n };\n}\n\nfunction throwInstanceAlreadyDeleted(obj) {\n function getInstanceTypeName(handle) {\n  return handle.$$.ptrType.registeredClass.name;\n }\n throwBindingError(getInstanceTypeName(obj) + \" instance already deleted\");\n}\n\nfunction ClassHandle_clone() {\n if (!this.$$.ptr) {\n  throwInstanceAlreadyDeleted(this);\n }\n if (this.$$.preservePointerOnDelete) {\n  this.$$.count.value += 1;\n  return this;\n } else {\n  var clone = attachFinalizer(Object.create(Object.getPrototypeOf(this), {\n   $$: {\n    value: shallowCopyInternalPointer(this.$$)\n   }\n  }));\n  clone.$$.count.value += 1;\n  clone.$$.deleteScheduled = false;\n  return clone;\n }\n}\n\nfunction ClassHandle_delete() {\n if (!this.$$.ptr) {\n  throwInstanceAlreadyDeleted(this);\n }\n if (this.$$.deleteScheduled && !this.$$.preservePointerOnDelete) {\n  throwBindingError(\"Object already scheduled for deletion\");\n }\n detachFinalizer(this);\n releaseClassHandle(this.$$);\n if (!this.$$.preservePointerOnDelete) {\n  this.$$.smartPtr = undefined;\n  this.$$.ptr = undefined;\n }\n}\n\nfunction ClassHandle_isDeleted() {\n return !this.$$.ptr;\n}\n\nfunction ClassHandle_deleteLater() {\n if (!this.$$.ptr) {\n  throwInstanceAlreadyDeleted(this);\n }\n if (this.$$.deleteScheduled && !this.$$.preservePointerOnDelete) {\n  throwBindingError(\"Object already scheduled for deletion\");\n }\n deletionQueue.push(this);\n if (deletionQueue.length === 1 && delayFunction) {\n  delayFunction(flushPendingDeletes);\n }\n this.$$.deleteScheduled = true;\n return this;\n}\n\nfunction init_ClassHandle() {\n ClassHandle.prototype[\"isAliasOf\"] = ClassHandle_isAliasOf;\n ClassHandle.prototype[\"clone\"] = ClassHandle_clone;\n ClassHandle.prototype[\"delete\"] = ClassHandle_delete;\n ClassHandle.prototype[\"isDeleted\"] = ClassHandle_isDeleted;\n ClassHandle.prototype[\"deleteLater\"] = ClassHandle_deleteLater;\n}\n\nfunction ClassHandle() {}\n\nvar registeredPointers = {};\n\nfunction ensureOverloadTable(proto, methodName, humanName) {\n if (undefined === proto[methodName].overloadTable) {\n  var prevFunc = proto[methodName];\n  proto[methodName] = function() {\n   if (!proto[methodName].overloadTable.hasOwnProperty(arguments.length)) {\n    throwBindingError(\"Function '\" + humanName + \"' called with an invalid number of arguments (\" + arguments.length + \") - expects one of (\" + proto[methodName].overloadTable + \")!\");\n   }\n   return proto[methodName].overloadTable[arguments.length].apply(this, arguments);\n  };\n  proto[methodName].overloadTable = [];\n  proto[methodName].overloadTable[prevFunc.argCount] = prevFunc;\n }\n}\n\nfunction exposePublicSymbol(name, value, numArguments) {\n if (Module.hasOwnProperty(name)) {\n  if (undefined === numArguments || undefined !== Module[name].overloadTable && undefined !== Module[name].overloadTable[numArguments]) {\n   throwBindingError(\"Cannot register public name '\" + name + \"' twice\");\n  }\n  ensureOverloadTable(Module, name, name);\n  if (Module.hasOwnProperty(numArguments)) {\n   throwBindingError(\"Cannot register multiple overloads of a function with the same number of arguments (\" + numArguments + \")!\");\n  }\n  Module[name].overloadTable[numArguments] = value;\n } else {\n  Module[name] = value;\n  if (undefined !== numArguments) {\n   Module[name].numArguments = numArguments;\n  }\n }\n}\n\nfunction RegisteredClass(name, constructor, instancePrototype, rawDestructor, baseClass, getActualType, upcast, downcast) {\n this.name = name;\n this.constructor = constructor;\n this.instancePrototype = instancePrototype;\n this.rawDestructor = rawDestructor;\n this.baseClass = baseClass;\n this.getActualType = getActualType;\n this.upcast = upcast;\n this.downcast = downcast;\n this.pureVirtualFunctions = [];\n}\n\nfunction upcastPointer(ptr, ptrClass, desiredClass) {\n while (ptrClass !== desiredClass) {\n  if (!ptrClass.upcast) {\n   throwBindingError(\"Expected null or instance of \" + desiredClass.name + \", got an instance of \" + ptrClass.name);\n  }\n  ptr = ptrClass.upcast(ptr);\n  ptrClass = ptrClass.baseClass;\n }\n return ptr;\n}\n\nfunction constNoSmartPtrRawPointerToWireType(destructors, handle) {\n if (handle === null) {\n  if (this.isReference) {\n   throwBindingError(\"null is not a valid \" + this.name);\n  }\n  return 0;\n }\n if (!handle.$$) {\n  throwBindingError('Cannot pass \"' + _embind_repr(handle) + '\" as a ' + this.name);\n }\n if (!handle.$$.ptr) {\n  throwBindingError(\"Cannot pass deleted object as a pointer of type \" + this.name);\n }\n var handleClass = handle.$$.ptrType.registeredClass;\n var ptr = upcastPointer(handle.$$.ptr, handleClass, this.registeredClass);\n return ptr;\n}\n\nfunction genericPointerToWireType(destructors, handle) {\n var ptr;\n if (handle === null) {\n  if (this.isReference) {\n   throwBindingError(\"null is not a valid \" + this.name);\n  }\n  if (this.isSmartPointer) {\n   ptr = this.rawConstructor();\n   if (destructors !== null) {\n    destructors.push(this.rawDestructor, ptr);\n   }\n   return ptr;\n  } else {\n   return 0;\n  }\n }\n if (!handle.$$) {\n  throwBindingError('Cannot pass \"' + _embind_repr(handle) + '\" as a ' + this.name);\n }\n if (!handle.$$.ptr) {\n  throwBindingError(\"Cannot pass deleted object as a pointer of type \" + this.name);\n }\n if (!this.isConst && handle.$$.ptrType.isConst) {\n  throwBindingError(\"Cannot convert argument of type \" + (handle.$$.smartPtrType ? handle.$$.smartPtrType.name : handle.$$.ptrType.name) + \" to parameter type \" + this.name);\n }\n var handleClass = handle.$$.ptrType.registeredClass;\n ptr = upcastPointer(handle.$$.ptr, handleClass, this.registeredClass);\n if (this.isSmartPointer) {\n  if (undefined === handle.$$.smartPtr) {\n   throwBindingError(\"Passing raw pointer to smart pointer is illegal\");\n  }\n  switch (this.sharingPolicy) {\n  case 0:\n   if (handle.$$.smartPtrType === this) {\n    ptr = handle.$$.smartPtr;\n   } else {\n    throwBindingError(\"Cannot convert argument of type \" + (handle.$$.smartPtrType ? handle.$$.smartPtrType.name : handle.$$.ptrType.name) + \" to parameter type \" + this.name);\n   }\n   break;\n\n  case 1:\n   ptr = handle.$$.smartPtr;\n   break;\n\n  case 2:\n   if (handle.$$.smartPtrType === this) {\n    ptr = handle.$$.smartPtr;\n   } else {\n    var clonedHandle = handle[\"clone\"]();\n    ptr = this.rawShare(ptr, __emval_register(function() {\n     clonedHandle[\"delete\"]();\n    }));\n    if (destructors !== null) {\n     destructors.push(this.rawDestructor, ptr);\n    }\n   }\n   break;\n\n  default:\n   throwBindingError(\"Unsupporting sharing policy\");\n  }\n }\n return ptr;\n}\n\nfunction nonConstNoSmartPtrRawPointerToWireType(destructors, handle) {\n if (handle === null) {\n  if (this.isReference) {\n   throwBindingError(\"null is not a valid \" + this.name);\n  }\n  return 0;\n }\n if (!handle.$$) {\n  throwBindingError('Cannot pass \"' + _embind_repr(handle) + '\" as a ' + this.name);\n }\n if (!handle.$$.ptr) {\n  throwBindingError(\"Cannot pass deleted object as a pointer of type \" + this.name);\n }\n if (handle.$$.ptrType.isConst) {\n  throwBindingError(\"Cannot convert argument of type \" + handle.$$.ptrType.name + \" to parameter type \" + this.name);\n }\n var handleClass = handle.$$.ptrType.registeredClass;\n var ptr = upcastPointer(handle.$$.ptr, handleClass, this.registeredClass);\n return ptr;\n}\n\nfunction RegisteredPointer_getPointee(ptr) {\n if (this.rawGetPointee) {\n  ptr = this.rawGetPointee(ptr);\n }\n return ptr;\n}\n\nfunction RegisteredPointer_destructor(ptr) {\n if (this.rawDestructor) {\n  this.rawDestructor(ptr);\n }\n}\n\nfunction RegisteredPointer_deleteObject(handle) {\n if (handle !== null) {\n  handle[\"delete\"]();\n }\n}\n\nfunction downcastPointer(ptr, ptrClass, desiredClass) {\n if (ptrClass === desiredClass) {\n  return ptr;\n }\n if (undefined === desiredClass.baseClass) {\n  return null;\n }\n var rv = downcastPointer(ptr, ptrClass, desiredClass.baseClass);\n if (rv === null) {\n  return null;\n }\n return desiredClass.downcast(rv);\n}\n\nfunction getInheritedInstance(class_, ptr) {\n ptr = getBasestPointer(class_, ptr);\n return registeredInstances[ptr];\n}\n\nfunction makeClassHandle(prototype, record) {\n if (!record.ptrType || !record.ptr) {\n  throwInternalError(\"makeClassHandle requires ptr and ptrType\");\n }\n var hasSmartPtrType = !!record.smartPtrType;\n var hasSmartPtr = !!record.smartPtr;\n if (hasSmartPtrType !== hasSmartPtr) {\n  throwInternalError(\"Both smartPtrType and smartPtr must be specified\");\n }\n record.count = {\n  value: 1\n };\n return attachFinalizer(Object.create(prototype, {\n  $$: {\n   value: record\n  }\n }));\n}\n\nfunction RegisteredPointer_fromWireType(ptr) {\n var rawPointer = this.getPointee(ptr);\n if (!rawPointer) {\n  this.destructor(ptr);\n  return null;\n }\n var registeredInstance = getInheritedInstance(this.registeredClass, rawPointer);\n if (undefined !== registeredInstance) {\n  if (0 === registeredInstance.$$.count.value) {\n   registeredInstance.$$.ptr = rawPointer;\n   registeredInstance.$$.smartPtr = ptr;\n   return registeredInstance[\"clone\"]();\n  } else {\n   var rv = registeredInstance[\"clone\"]();\n   this.destructor(ptr);\n   return rv;\n  }\n }\n function makeDefaultHandle() {\n  if (this.isSmartPointer) {\n   return makeClassHandle(this.registeredClass.instancePrototype, {\n    ptrType: this.pointeeType,\n    ptr: rawPointer,\n    smartPtrType: this,\n    smartPtr: ptr\n   });\n  } else {\n   return makeClassHandle(this.registeredClass.instancePrototype, {\n    ptrType: this,\n    ptr: ptr\n   });\n  }\n }\n var actualType = this.registeredClass.getActualType(rawPointer);\n var registeredPointerRecord = registeredPointers[actualType];\n if (!registeredPointerRecord) {\n  return makeDefaultHandle.call(this);\n }\n var toType;\n if (this.isConst) {\n  toType = registeredPointerRecord.constPointerType;\n } else {\n  toType = registeredPointerRecord.pointerType;\n }\n var dp = downcastPointer(rawPointer, this.registeredClass, toType.registeredClass);\n if (dp === null) {\n  return makeDefaultHandle.call(this);\n }\n if (this.isSmartPointer) {\n  return makeClassHandle(toType.registeredClass.instancePrototype, {\n   ptrType: toType,\n   ptr: dp,\n   smartPtrType: this,\n   smartPtr: ptr\n  });\n } else {\n  return makeClassHandle(toType.registeredClass.instancePrototype, {\n   ptrType: toType,\n   ptr: dp\n  });\n }\n}\n\nfunction init_RegisteredPointer() {\n RegisteredPointer.prototype.getPointee = RegisteredPointer_getPointee;\n RegisteredPointer.prototype.destructor = RegisteredPointer_destructor;\n RegisteredPointer.prototype[\"argPackAdvance\"] = 8;\n RegisteredPointer.prototype[\"readValueFromPointer\"] = simpleReadValueFromPointer;\n RegisteredPointer.prototype[\"deleteObject\"] = RegisteredPointer_deleteObject;\n RegisteredPointer.prototype[\"fromWireType\"] = RegisteredPointer_fromWireType;\n}\n\nfunction RegisteredPointer(name, registeredClass, isReference, isConst, isSmartPointer, pointeeType, sharingPolicy, rawGetPointee, rawConstructor, rawShare, rawDestructor) {\n this.name = name;\n this.registeredClass = registeredClass;\n this.isReference = isReference;\n this.isConst = isConst;\n this.isSmartPointer = isSmartPointer;\n this.pointeeType = pointeeType;\n this.sharingPolicy = sharingPolicy;\n this.rawGetPointee = rawGetPointee;\n this.rawConstructor = rawConstructor;\n this.rawShare = rawShare;\n this.rawDestructor = rawDestructor;\n if (!isSmartPointer && registeredClass.baseClass === undefined) {\n  if (isConst) {\n   this[\"toWireType\"] = constNoSmartPtrRawPointerToWireType;\n   this.destructorFunction = null;\n  } else {\n   this[\"toWireType\"] = nonConstNoSmartPtrRawPointerToWireType;\n   this.destructorFunction = null;\n  }\n } else {\n  this[\"toWireType\"] = genericPointerToWireType;\n }\n}\n\nfunction replacePublicSymbol(name, value, numArguments) {\n if (!Module.hasOwnProperty(name)) {\n  throwInternalError(\"Replacing nonexistant public symbol\");\n }\n if (undefined !== Module[name].overloadTable && undefined !== numArguments) {\n  Module[name].overloadTable[numArguments] = value;\n } else {\n  Module[name] = value;\n  Module[name].argCount = numArguments;\n }\n}\n\nfunction dynCallLegacy(sig, ptr, args) {\n var f = Module[\"dynCall_\" + sig];\n return args && args.length ? f.apply(null, [ ptr ].concat(args)) : f.call(null, ptr);\n}\n\nfunction dynCall(sig, ptr, args) {\n if (sig.indexOf(\"j\") != -1) {\n  return dynCallLegacy(sig, ptr, args);\n }\n return wasmTable.get(ptr).apply(null, args);\n}\n\nfunction getDynCaller(sig, ptr) {\n var argCache = [];\n return function() {\n  argCache.length = arguments.length;\n  for (var i = 0; i < arguments.length; i++) {\n   argCache[i] = arguments[i];\n  }\n  return dynCall(sig, ptr, argCache);\n };\n}\n\nfunction embind__requireFunction(signature, rawFunction) {\n signature = readLatin1String(signature);\n function makeDynCaller() {\n  if (signature.indexOf(\"j\") != -1) {\n   return getDynCaller(signature, rawFunction);\n  }\n  return wasmTable.get(rawFunction);\n }\n var fp = makeDynCaller();\n if (typeof fp !== \"function\") {\n  throwBindingError(\"unknown function pointer with signature \" + signature + \": \" + rawFunction);\n }\n return fp;\n}\n\nvar UnboundTypeError = undefined;\n\nfunction throwUnboundTypeError(message, types) {\n var unboundTypes = [];\n var seen = {};\n function visit(type) {\n  if (seen[type]) {\n   return;\n  }\n  if (registeredTypes[type]) {\n   return;\n  }\n  if (typeDependencies[type]) {\n   typeDependencies[type].forEach(visit);\n   return;\n  }\n  unboundTypes.push(type);\n  seen[type] = true;\n }\n types.forEach(visit);\n throw new UnboundTypeError(message + \": \" + unboundTypes.map(getTypeName).join([ \", \" ]));\n}\n\nfunction __embind_register_class(rawType, rawPointerType, rawConstPointerType, baseClassRawType, getActualTypeSignature, getActualType, upcastSignature, upcast, downcastSignature, downcast, name, destructorSignature, rawDestructor) {\n name = readLatin1String(name);\n getActualType = embind__requireFunction(getActualTypeSignature, getActualType);\n if (upcast) {\n  upcast = embind__requireFunction(upcastSignature, upcast);\n }\n if (downcast) {\n  downcast = embind__requireFunction(downcastSignature, downcast);\n }\n rawDestructor = embind__requireFunction(destructorSignature, rawDestructor);\n var legalFunctionName = makeLegalFunctionName(name);\n exposePublicSymbol(legalFunctionName, function() {\n  throwUnboundTypeError(\"Cannot construct \" + name + \" due to unbound types\", [ baseClassRawType ]);\n });\n whenDependentTypesAreResolved([ rawType, rawPointerType, rawConstPointerType ], baseClassRawType ? [ baseClassRawType ] : [], function(base) {\n  base = base[0];\n  var baseClass;\n  var basePrototype;\n  if (baseClassRawType) {\n   baseClass = base.registeredClass;\n   basePrototype = baseClass.instancePrototype;\n  } else {\n   basePrototype = ClassHandle.prototype;\n  }\n  var constructor = createNamedFunction(legalFunctionName, function() {\n   if (Object.getPrototypeOf(this) !== instancePrototype) {\n    throw new BindingError(\"Use 'new' to construct \" + name);\n   }\n   if (undefined === registeredClass.constructor_body) {\n    throw new BindingError(name + \" has no accessible constructor\");\n   }\n   var body = registeredClass.constructor_body[arguments.length];\n   if (undefined === body) {\n    throw new BindingError(\"Tried to invoke ctor of \" + name + \" with invalid number of parameters (\" + arguments.length + \") - expected (\" + Object.keys(registeredClass.constructor_body).toString() + \") parameters instead!\");\n   }\n   return body.apply(this, arguments);\n  });\n  var instancePrototype = Object.create(basePrototype, {\n   constructor: {\n    value: constructor\n   }\n  });\n  constructor.prototype = instancePrototype;\n  var registeredClass = new RegisteredClass(name, constructor, instancePrototype, rawDestructor, baseClass, getActualType, upcast, downcast);\n  var referenceConverter = new RegisteredPointer(name, registeredClass, true, false, false);\n  var pointerConverter = new RegisteredPointer(name + \"*\", registeredClass, false, false, false);\n  var constPointerConverter = new RegisteredPointer(name + \" const*\", registeredClass, false, true, false);\n  registeredPointers[rawType] = {\n   pointerType: pointerConverter,\n   constPointerType: constPointerConverter\n  };\n  replacePublicSymbol(legalFunctionName, constructor);\n  return [ referenceConverter, pointerConverter, constPointerConverter ];\n });\n}\n\nfunction new_(constructor, argumentList) {\n if (!(constructor instanceof Function)) {\n  throw new TypeError(\"new_ called with constructor type \" + typeof constructor + \" which is not a function\");\n }\n var dummy = createNamedFunction(constructor.name || \"unknownFunctionName\", function() {});\n dummy.prototype = constructor.prototype;\n var obj = new dummy();\n var r = constructor.apply(obj, argumentList);\n return r instanceof Object ? r : obj;\n}\n\nfunction craftInvokerFunction(humanName, argTypes, classType, cppInvokerFunc, cppTargetFunc) {\n var argCount = argTypes.length;\n if (argCount < 2) {\n  throwBindingError(\"argTypes array size mismatch! Must at least get return value and 'this' types!\");\n }\n var isClassMethodFunc = argTypes[1] !== null && classType !== null;\n var needsDestructorStack = false;\n for (var i = 1; i < argTypes.length; ++i) {\n  if (argTypes[i] !== null && argTypes[i].destructorFunction === undefined) {\n   needsDestructorStack = true;\n   break;\n  }\n }\n var returns = argTypes[0].name !== \"void\";\n var argsList = \"\";\n var argsListWired = \"\";\n for (var i = 0; i < argCount - 2; ++i) {\n  argsList += (i !== 0 ? \", \" : \"\") + \"arg\" + i;\n  argsListWired += (i !== 0 ? \", \" : \"\") + \"arg\" + i + \"Wired\";\n }\n var invokerFnBody = \"return function \" + makeLegalFunctionName(humanName) + \"(\" + argsList + \") {\\n\" + \"if (arguments.length !== \" + (argCount - 2) + \") {\\n\" + \"throwBindingError('function \" + humanName + \" called with ' + arguments.length + ' arguments, expected \" + (argCount - 2) + \" args!');\\n\" + \"}\\n\";\n if (needsDestructorStack) {\n  invokerFnBody += \"var destructors = [];\\n\";\n }\n var dtorStack = needsDestructorStack ? \"destructors\" : \"null\";\n var args1 = [ \"throwBindingError\", \"invoker\", \"fn\", \"runDestructors\", \"retType\", \"classParam\" ];\n var args2 = [ throwBindingError, cppInvokerFunc, cppTargetFunc, runDestructors, argTypes[0], argTypes[1] ];\n if (isClassMethodFunc) {\n  invokerFnBody += \"var thisWired = classParam.toWireType(\" + dtorStack + \", this);\\n\";\n }\n for (var i = 0; i < argCount - 2; ++i) {\n  invokerFnBody += \"var arg\" + i + \"Wired = argType\" + i + \".toWireType(\" + dtorStack + \", arg\" + i + \"); // \" + argTypes[i + 2].name + \"\\n\";\n  args1.push(\"argType\" + i);\n  args2.push(argTypes[i + 2]);\n }\n if (isClassMethodFunc) {\n  argsListWired = \"thisWired\" + (argsListWired.length > 0 ? \", \" : \"\") + argsListWired;\n }\n invokerFnBody += (returns ? \"var rv = \" : \"\") + \"invoker(fn\" + (argsListWired.length > 0 ? \", \" : \"\") + argsListWired + \");\\n\";\n if (needsDestructorStack) {\n  invokerFnBody += \"runDestructors(destructors);\\n\";\n } else {\n  for (var i = isClassMethodFunc ? 1 : 2; i < argTypes.length; ++i) {\n   var paramName = i === 1 ? \"thisWired\" : \"arg\" + (i - 2) + \"Wired\";\n   if (argTypes[i].destructorFunction !== null) {\n    invokerFnBody += paramName + \"_dtor(\" + paramName + \"); // \" + argTypes[i].name + \"\\n\";\n    args1.push(paramName + \"_dtor\");\n    args2.push(argTypes[i].destructorFunction);\n   }\n  }\n }\n if (returns) {\n  invokerFnBody += \"var ret = retType.fromWireType(rv);\\n\" + \"return ret;\\n\";\n } else {}\n invokerFnBody += \"}\\n\";\n args1.push(invokerFnBody);\n var invokerFunction = new_(Function, args1).apply(null, args2);\n return invokerFunction;\n}\n\nfunction heap32VectorToArray(count, firstElement) {\n var array = [];\n for (var i = 0; i < count; i++) {\n  array.push(HEAP32[(firstElement >> 2) + i]);\n }\n return array;\n}\n\nfunction __embind_register_class_class_function(rawClassType, methodName, argCount, rawArgTypesAddr, invokerSignature, rawInvoker, fn) {\n var rawArgTypes = heap32VectorToArray(argCount, rawArgTypesAddr);\n methodName = readLatin1String(methodName);\n rawInvoker = embind__requireFunction(invokerSignature, rawInvoker);\n whenDependentTypesAreResolved([], [ rawClassType ], function(classType) {\n  classType = classType[0];\n  var humanName = classType.name + \".\" + methodName;\n  function unboundTypesHandler() {\n   throwUnboundTypeError(\"Cannot call \" + humanName + \" due to unbound types\", rawArgTypes);\n  }\n  var proto = classType.registeredClass.constructor;\n  if (undefined === proto[methodName]) {\n   unboundTypesHandler.argCount = argCount - 1;\n   proto[methodName] = unboundTypesHandler;\n  } else {\n   ensureOverloadTable(proto, methodName, humanName);\n   proto[methodName].overloadTable[argCount - 1] = unboundTypesHandler;\n  }\n  whenDependentTypesAreResolved([], rawArgTypes, function(argTypes) {\n   var invokerArgsArray = [ argTypes[0], null ].concat(argTypes.slice(1));\n   var func = craftInvokerFunction(humanName, invokerArgsArray, null, rawInvoker, fn);\n   if (undefined === proto[methodName].overloadTable) {\n    func.argCount = argCount - 1;\n    proto[methodName] = func;\n   } else {\n    proto[methodName].overloadTable[argCount - 1] = func;\n   }\n   return [];\n  });\n  return [];\n });\n}\n\nfunction validateThis(this_, classType, humanName) {\n if (!(this_ instanceof Object)) {\n  throwBindingError(humanName + ' with invalid \"this\": ' + this_);\n }\n if (!(this_ instanceof classType.registeredClass.constructor)) {\n  throwBindingError(humanName + ' incompatible with \"this\" of type ' + this_.constructor.name);\n }\n if (!this_.$$.ptr) {\n  throwBindingError(\"cannot call emscripten binding method \" + humanName + \" on deleted object\");\n }\n return upcastPointer(this_.$$.ptr, this_.$$.ptrType.registeredClass, classType.registeredClass);\n}\n\nfunction __embind_register_class_class_property(rawClassType, fieldName, rawFieldType, rawFieldPtr, getterSignature, getter, setterSignature, setter) {\n fieldName = readLatin1String(fieldName);\n getter = embind__requireFunction(getterSignature, getter);\n whenDependentTypesAreResolved([], [ rawClassType ], function(classType) {\n  classType = classType[0];\n  var humanName = classType.name + \".\" + fieldName;\n  var desc = {\n   get: function() {\n    throwUnboundTypeError(\"Cannot access \" + humanName + \" due to unbound types\", [ rawFieldType ]);\n   },\n   enumerable: true,\n   configurable: true\n  };\n  if (setter) {\n   desc.set = function() {\n    throwUnboundTypeError(\"Cannot access \" + humanName + \" due to unbound types\", [ rawFieldType ]);\n   };\n  } else {\n   desc.set = function(v) {\n    throwBindingError(humanName + \" is a read-only property\");\n   };\n  }\n  Object.defineProperty(classType.registeredClass.constructor, fieldName, desc);\n  whenDependentTypesAreResolved([], [ rawFieldType ], function(fieldType) {\n   fieldType = fieldType[0];\n   var desc = {\n    get: function() {\n     return fieldType[\"fromWireType\"](getter(rawFieldPtr));\n    },\n    enumerable: true\n   };\n   if (setter) {\n    setter = embind__requireFunction(setterSignature, setter);\n    desc.set = function(v) {\n     var destructors = [];\n     setter(rawFieldPtr, fieldType[\"toWireType\"](destructors, v));\n     runDestructors(destructors);\n    };\n   }\n   Object.defineProperty(classType.registeredClass.constructor, fieldName, desc);\n   return [];\n  });\n  return [];\n });\n}\n\nfunction __embind_register_class_constructor(rawClassType, argCount, rawArgTypesAddr, invokerSignature, invoker, rawConstructor) {\n assert(argCount > 0);\n var rawArgTypes = heap32VectorToArray(argCount, rawArgTypesAddr);\n invoker = embind__requireFunction(invokerSignature, invoker);\n var args = [ rawConstructor ];\n var destructors = [];\n whenDependentTypesAreResolved([], [ rawClassType ], function(classType) {\n  classType = classType[0];\n  var humanName = \"constructor \" + classType.name;\n  if (undefined === classType.registeredClass.constructor_body) {\n   classType.registeredClass.constructor_body = [];\n  }\n  if (undefined !== classType.registeredClass.constructor_body[argCount - 1]) {\n   throw new BindingError(\"Cannot register multiple constructors with identical number of parameters (\" + (argCount - 1) + \") for class '\" + classType.name + \"'! Overload resolution is currently only performed using the parameter count, not actual type info!\");\n  }\n  classType.registeredClass.constructor_body[argCount - 1] = function unboundTypeHandler() {\n   throwUnboundTypeError(\"Cannot construct \" + classType.name + \" due to unbound types\", rawArgTypes);\n  };\n  whenDependentTypesAreResolved([], rawArgTypes, function(argTypes) {\n   classType.registeredClass.constructor_body[argCount - 1] = function constructor_body() {\n    if (arguments.length !== argCount - 1) {\n     throwBindingError(humanName + \" called with \" + arguments.length + \" arguments, expected \" + (argCount - 1));\n    }\n    destructors.length = 0;\n    args.length = argCount;\n    for (var i = 1; i < argCount; ++i) {\n     args[i] = argTypes[i][\"toWireType\"](destructors, arguments[i - 1]);\n    }\n    var ptr = invoker.apply(null, args);\n    runDestructors(destructors);\n    return argTypes[0][\"fromWireType\"](ptr);\n   };\n   return [];\n  });\n  return [];\n });\n}\n\nfunction __embind_register_class_function(rawClassType, methodName, argCount, rawArgTypesAddr, invokerSignature, rawInvoker, context, isPureVirtual) {\n var rawArgTypes = heap32VectorToArray(argCount, rawArgTypesAddr);\n methodName = readLatin1String(methodName);\n rawInvoker = embind__requireFunction(invokerSignature, rawInvoker);\n whenDependentTypesAreResolved([], [ rawClassType ], function(classType) {\n  classType = classType[0];\n  var humanName = classType.name + \".\" + methodName;\n  if (isPureVirtual) {\n   classType.registeredClass.pureVirtualFunctions.push(methodName);\n  }\n  function unboundTypesHandler() {\n   throwUnboundTypeError(\"Cannot call \" + humanName + \" due to unbound types\", rawArgTypes);\n  }\n  var proto = classType.registeredClass.instancePrototype;\n  var method = proto[methodName];\n  if (undefined === method || undefined === method.overloadTable && method.className !== classType.name && method.argCount === argCount - 2) {\n   unboundTypesHandler.argCount = argCount - 2;\n   unboundTypesHandler.className = classType.name;\n   proto[methodName] = unboundTypesHandler;\n  } else {\n   ensureOverloadTable(proto, methodName, humanName);\n   proto[methodName].overloadTable[argCount - 2] = unboundTypesHandler;\n  }\n  whenDependentTypesAreResolved([], rawArgTypes, function(argTypes) {\n   var memberFunction = craftInvokerFunction(humanName, argTypes, classType, rawInvoker, context);\n   if (undefined === proto[methodName].overloadTable) {\n    memberFunction.argCount = argCount - 2;\n    proto[methodName] = memberFunction;\n   } else {\n    proto[methodName].overloadTable[argCount - 2] = memberFunction;\n   }\n   return [];\n  });\n  return [];\n });\n}\n\nfunction __embind_register_class_property(classType, fieldName, getterReturnType, getterSignature, getter, getterContext, setterArgumentType, setterSignature, setter, setterContext) {\n fieldName = readLatin1String(fieldName);\n getter = embind__requireFunction(getterSignature, getter);\n whenDependentTypesAreResolved([], [ classType ], function(classType) {\n  classType = classType[0];\n  var humanName = classType.name + \".\" + fieldName;\n  var desc = {\n   get: function() {\n    throwUnboundTypeError(\"Cannot access \" + humanName + \" due to unbound types\", [ getterReturnType, setterArgumentType ]);\n   },\n   enumerable: true,\n   configurable: true\n  };\n  if (setter) {\n   desc.set = function() {\n    throwUnboundTypeError(\"Cannot access \" + humanName + \" due to unbound types\", [ getterReturnType, setterArgumentType ]);\n   };\n  } else {\n   desc.set = function(v) {\n    throwBindingError(humanName + \" is a read-only property\");\n   };\n  }\n  Object.defineProperty(classType.registeredClass.instancePrototype, fieldName, desc);\n  whenDependentTypesAreResolved([], setter ? [ getterReturnType, setterArgumentType ] : [ getterReturnType ], function(types) {\n   var getterReturnType = types[0];\n   var desc = {\n    get: function() {\n     var ptr = validateThis(this, classType, humanName + \" getter\");\n     return getterReturnType[\"fromWireType\"](getter(getterContext, ptr));\n    },\n    enumerable: true\n   };\n   if (setter) {\n    setter = embind__requireFunction(setterSignature, setter);\n    var setterArgumentType = types[1];\n    desc.set = function(v) {\n     var ptr = validateThis(this, classType, humanName + \" setter\");\n     var destructors = [];\n     setter(setterContext, ptr, setterArgumentType[\"toWireType\"](destructors, v));\n     runDestructors(destructors);\n    };\n   }\n   Object.defineProperty(classType.registeredClass.instancePrototype, fieldName, desc);\n   return [];\n  });\n  return [];\n });\n}\n\nfunction __emval_decref(handle) {\n if (handle > 4 && 0 === --emval_handle_array[handle].refcount) {\n  emval_handle_array[handle] = undefined;\n  emval_free_list.push(handle);\n }\n}\n\nfunction __embind_register_emval(rawType, name) {\n name = readLatin1String(name);\n registerType(rawType, {\n  name: name,\n  \"fromWireType\": function(handle) {\n   var rv = emval_handle_array[handle].value;\n   __emval_decref(handle);\n   return rv;\n  },\n  \"toWireType\": function(destructors, value) {\n   return __emval_register(value);\n  },\n  \"argPackAdvance\": 8,\n  \"readValueFromPointer\": simpleReadValueFromPointer,\n  destructorFunction: null\n });\n}\n\nfunction enumReadValueFromPointer(name, shift, signed) {\n switch (shift) {\n case 0:\n  return function(pointer) {\n   var heap = signed ? HEAP8 : HEAPU8;\n   return this[\"fromWireType\"](heap[pointer]);\n  };\n\n case 1:\n  return function(pointer) {\n   var heap = signed ? HEAP16 : HEAPU16;\n   return this[\"fromWireType\"](heap[pointer >> 1]);\n  };\n\n case 2:\n  return function(pointer) {\n   var heap = signed ? HEAP32 : HEAPU32;\n   return this[\"fromWireType\"](heap[pointer >> 2]);\n  };\n\n default:\n  throw new TypeError(\"Unknown integer type: \" + name);\n }\n}\n\nfunction __embind_register_enum(rawType, name, size, isSigned) {\n var shift = getShiftFromSize(size);\n name = readLatin1String(name);\n function ctor() {}\n ctor.values = {};\n registerType(rawType, {\n  name: name,\n  constructor: ctor,\n  \"fromWireType\": function(c) {\n   return this.constructor.values[c];\n  },\n  \"toWireType\": function(destructors, c) {\n   return c.value;\n  },\n  \"argPackAdvance\": 8,\n  \"readValueFromPointer\": enumReadValueFromPointer(name, shift, isSigned),\n  destructorFunction: null\n });\n exposePublicSymbol(name, ctor);\n}\n\nfunction __embind_register_enum_value(rawEnumType, name, enumValue) {\n var enumType = requireRegisteredType(rawEnumType, \"enum\");\n name = readLatin1String(name);\n var Enum = enumType.constructor;\n var Value = Object.create(enumType.constructor.prototype, {\n  value: {\n   value: enumValue\n  },\n  constructor: {\n   value: createNamedFunction(enumType.name + \"_\" + name, function() {})\n  }\n });\n Enum.values[enumValue] = Value;\n Enum[name] = Value;\n}\n\nfunction _embind_repr(v) {\n if (v === null) {\n  return \"null\";\n }\n var t = typeof v;\n if (t === \"object\" || t === \"array\" || t === \"function\") {\n  return v.toString();\n } else {\n  return \"\" + v;\n }\n}\n\nfunction floatReadValueFromPointer(name, shift) {\n switch (shift) {\n case 2:\n  return function(pointer) {\n   return this[\"fromWireType\"](HEAPF32[pointer >> 2]);\n  };\n\n case 3:\n  return function(pointer) {\n   return this[\"fromWireType\"](HEAPF64[pointer >> 3]);\n  };\n\n default:\n  throw new TypeError(\"Unknown float type: \" + name);\n }\n}\n\nfunction __embind_register_float(rawType, name, size) {\n var shift = getShiftFromSize(size);\n name = readLatin1String(name);\n registerType(rawType, {\n  name: name,\n  \"fromWireType\": function(value) {\n   return value;\n  },\n  \"toWireType\": function(destructors, value) {\n   if (typeof value !== \"number\" && typeof value !== \"boolean\") {\n    throw new TypeError('Cannot convert \"' + _embind_repr(value) + '\" to ' + this.name);\n   }\n   return value;\n  },\n  \"argPackAdvance\": 8,\n  \"readValueFromPointer\": floatReadValueFromPointer(name, shift),\n  destructorFunction: null\n });\n}\n\nfunction __embind_register_function(name, argCount, rawArgTypesAddr, signature, rawInvoker, fn) {\n var argTypes = heap32VectorToArray(argCount, rawArgTypesAddr);\n name = readLatin1String(name);\n rawInvoker = embind__requireFunction(signature, rawInvoker);\n exposePublicSymbol(name, function() {\n  throwUnboundTypeError(\"Cannot call \" + name + \" due to unbound types\", argTypes);\n }, argCount - 1);\n whenDependentTypesAreResolved([], argTypes, function(argTypes) {\n  var invokerArgsArray = [ argTypes[0], null ].concat(argTypes.slice(1));\n  replacePublicSymbol(name, craftInvokerFunction(name, invokerArgsArray, null, rawInvoker, fn), argCount - 1);\n  return [];\n });\n}\n\nfunction integerReadValueFromPointer(name, shift, signed) {\n switch (shift) {\n case 0:\n  return signed ? function readS8FromPointer(pointer) {\n   return HEAP8[pointer];\n  } : function readU8FromPointer(pointer) {\n   return HEAPU8[pointer];\n  };\n\n case 1:\n  return signed ? function readS16FromPointer(pointer) {\n   return HEAP16[pointer >> 1];\n  } : function readU16FromPointer(pointer) {\n   return HEAPU16[pointer >> 1];\n  };\n\n case 2:\n  return signed ? function readS32FromPointer(pointer) {\n   return HEAP32[pointer >> 2];\n  } : function readU32FromPointer(pointer) {\n   return HEAPU32[pointer >> 2];\n  };\n\n default:\n  throw new TypeError(\"Unknown integer type: \" + name);\n }\n}\n\nfunction __embind_register_integer(primitiveType, name, size, minRange, maxRange) {\n name = readLatin1String(name);\n if (maxRange === -1) {\n  maxRange = 4294967295;\n }\n var shift = getShiftFromSize(size);\n var fromWireType = function(value) {\n  return value;\n };\n if (minRange === 0) {\n  var bitshift = 32 - 8 * size;\n  fromWireType = function(value) {\n   return value << bitshift >>> bitshift;\n  };\n }\n var isUnsignedType = name.indexOf(\"unsigned\") != -1;\n registerType(primitiveType, {\n  name: name,\n  \"fromWireType\": fromWireType,\n  \"toWireType\": function(destructors, value) {\n   if (typeof value !== \"number\" && typeof value !== \"boolean\") {\n    throw new TypeError('Cannot convert \"' + _embind_repr(value) + '\" to ' + this.name);\n   }\n   if (value < minRange || value > maxRange) {\n    throw new TypeError('Passing a number \"' + _embind_repr(value) + '\" from JS side to C/C++ side to an argument of type \"' + name + '\", which is outside the valid range [' + minRange + \", \" + maxRange + \"]!\");\n   }\n   return isUnsignedType ? value >>> 0 : value | 0;\n  },\n  \"argPackAdvance\": 8,\n  \"readValueFromPointer\": integerReadValueFromPointer(name, shift, minRange !== 0),\n  destructorFunction: null\n });\n}\n\nfunction __embind_register_memory_view(rawType, dataTypeIndex, name) {\n var typeMapping = [ Int8Array, Uint8Array, Int16Array, Uint16Array, Int32Array, Uint32Array, Float32Array, Float64Array ];\n var TA = typeMapping[dataTypeIndex];\n function decodeMemoryView(handle) {\n  handle = handle >> 2;\n  var heap = HEAPU32;\n  var size = heap[handle];\n  var data = heap[handle + 1];\n  return new TA(buffer, data, size);\n }\n name = readLatin1String(name);\n registerType(rawType, {\n  name: name,\n  \"fromWireType\": decodeMemoryView,\n  \"argPackAdvance\": 8,\n  \"readValueFromPointer\": decodeMemoryView\n }, {\n  ignoreDuplicateRegistrations: true\n });\n}\n\nfunction __embind_register_std_string(rawType, name) {\n name = readLatin1String(name);\n var stdStringIsUTF8 = name === \"std::string\";\n registerType(rawType, {\n  name: name,\n  \"fromWireType\": function(value) {\n   var length = HEAPU32[value >> 2];\n   var str;\n   if (stdStringIsUTF8) {\n    var decodeStartPtr = value + 4;\n    for (var i = 0; i <= length; ++i) {\n     var currentBytePtr = value + 4 + i;\n     if (i == length || HEAPU8[currentBytePtr] == 0) {\n      var maxRead = currentBytePtr - decodeStartPtr;\n      var stringSegment = UTF8ToString(decodeStartPtr, maxRead);\n      if (str === undefined) {\n       str = stringSegment;\n      } else {\n       str += String.fromCharCode(0);\n       str += stringSegment;\n      }\n      decodeStartPtr = currentBytePtr + 1;\n     }\n    }\n   } else {\n    var a = new Array(length);\n    for (var i = 0; i < length; ++i) {\n     a[i] = String.fromCharCode(HEAPU8[value + 4 + i]);\n    }\n    str = a.join(\"\");\n   }\n   _free(value);\n   return str;\n  },\n  \"toWireType\": function(destructors, value) {\n   if (value instanceof ArrayBuffer) {\n    value = new Uint8Array(value);\n   }\n   var getLength;\n   var valueIsOfTypeString = typeof value === \"string\";\n   if (!(valueIsOfTypeString || value instanceof Uint8Array || value instanceof Uint8ClampedArray || value instanceof Int8Array)) {\n    throwBindingError(\"Cannot pass non-string to std::string\");\n   }\n   if (stdStringIsUTF8 && valueIsOfTypeString) {\n    getLength = function() {\n     return lengthBytesUTF8(value);\n    };\n   } else {\n    getLength = function() {\n     return value.length;\n    };\n   }\n   var length = getLength();\n   var ptr = _malloc(4 + length + 1);\n   HEAPU32[ptr >> 2] = length;\n   if (stdStringIsUTF8 && valueIsOfTypeString) {\n    stringToUTF8(value, ptr + 4, length + 1);\n   } else {\n    if (valueIsOfTypeString) {\n     for (var i = 0; i < length; ++i) {\n      var charCode = value.charCodeAt(i);\n      if (charCode > 255) {\n       _free(ptr);\n       throwBindingError(\"String has UTF-16 code units that do not fit in 8 bits\");\n      }\n      HEAPU8[ptr + 4 + i] = charCode;\n     }\n    } else {\n     for (var i = 0; i < length; ++i) {\n      HEAPU8[ptr + 4 + i] = value[i];\n     }\n    }\n   }\n   if (destructors !== null) {\n    destructors.push(_free, ptr);\n   }\n   return ptr;\n  },\n  \"argPackAdvance\": 8,\n  \"readValueFromPointer\": simpleReadValueFromPointer,\n  destructorFunction: function(ptr) {\n   _free(ptr);\n  }\n });\n}\n\nfunction __embind_register_std_wstring(rawType, charSize, name) {\n name = readLatin1String(name);\n var decodeString, encodeString, getHeap, lengthBytesUTF, shift;\n if (charSize === 2) {\n  decodeString = UTF16ToString;\n  encodeString = stringToUTF16;\n  lengthBytesUTF = lengthBytesUTF16;\n  getHeap = function() {\n   return HEAPU16;\n  };\n  shift = 1;\n } else if (charSize === 4) {\n  decodeString = UTF32ToString;\n  encodeString = stringToUTF32;\n  lengthBytesUTF = lengthBytesUTF32;\n  getHeap = function() {\n   return HEAPU32;\n  };\n  shift = 2;\n }\n registerType(rawType, {\n  name: name,\n  \"fromWireType\": function(value) {\n   var length = HEAPU32[value >> 2];\n   var HEAP = getHeap();\n   var str;\n   var decodeStartPtr = value + 4;\n   for (var i = 0; i <= length; ++i) {\n    var currentBytePtr = value + 4 + i * charSize;\n    if (i == length || HEAP[currentBytePtr >> shift] == 0) {\n     var maxReadBytes = currentBytePtr - decodeStartPtr;\n     var stringSegment = decodeString(decodeStartPtr, maxReadBytes);\n     if (str === undefined) {\n      str = stringSegment;\n     } else {\n      str += String.fromCharCode(0);\n      str += stringSegment;\n     }\n     decodeStartPtr = currentBytePtr + charSize;\n    }\n   }\n   _free(value);\n   return str;\n  },\n  \"toWireType\": function(destructors, value) {\n   if (!(typeof value === \"string\")) {\n    throwBindingError(\"Cannot pass non-string to C++ string type \" + name);\n   }\n   var length = lengthBytesUTF(value);\n   var ptr = _malloc(4 + length + charSize);\n   HEAPU32[ptr >> 2] = length >> shift;\n   encodeString(value, ptr + 4, length + charSize);\n   if (destructors !== null) {\n    destructors.push(_free, ptr);\n   }\n   return ptr;\n  },\n  \"argPackAdvance\": 8,\n  \"readValueFromPointer\": simpleReadValueFromPointer,\n  destructorFunction: function(ptr) {\n   _free(ptr);\n  }\n });\n}\n\nfunction __embind_register_value_object(rawType, name, constructorSignature, rawConstructor, destructorSignature, rawDestructor) {\n structRegistrations[rawType] = {\n  name: readLatin1String(name),\n  rawConstructor: embind__requireFunction(constructorSignature, rawConstructor),\n  rawDestructor: embind__requireFunction(destructorSignature, rawDestructor),\n  fields: []\n };\n}\n\nfunction __embind_register_value_object_field(structType, fieldName, getterReturnType, getterSignature, getter, getterContext, setterArgumentType, setterSignature, setter, setterContext) {\n structRegistrations[structType].fields.push({\n  fieldName: readLatin1String(fieldName),\n  getterReturnType: getterReturnType,\n  getter: embind__requireFunction(getterSignature, getter),\n  getterContext: getterContext,\n  setterArgumentType: setterArgumentType,\n  setter: embind__requireFunction(setterSignature, setter),\n  setterContext: setterContext\n });\n}\n\nfunction __embind_register_void(rawType, name) {\n name = readLatin1String(name);\n registerType(rawType, {\n  isVoid: true,\n  name: name,\n  \"argPackAdvance\": 0,\n  \"fromWireType\": function() {\n   return undefined;\n  },\n  \"toWireType\": function(destructors, o) {\n   return undefined;\n  }\n });\n}\n\nfunction __emval_as(handle, returnType, destructorsRef) {\n handle = requireHandle(handle);\n returnType = requireRegisteredType(returnType, \"emval::as\");\n var destructors = [];\n var rd = __emval_register(destructors);\n HEAP32[destructorsRef >> 2] = rd;\n return returnType[\"toWireType\"](destructors, handle);\n}\n\nfunction __emval_allocateDestructors(destructorsRef) {\n var destructors = [];\n HEAP32[destructorsRef >> 2] = __emval_register(destructors);\n return destructors;\n}\n\nvar emval_symbols = {};\n\nfunction getStringOrSymbol(address) {\n var symbol = emval_symbols[address];\n if (symbol === undefined) {\n  return readLatin1String(address);\n } else {\n  return symbol;\n }\n}\n\nvar emval_methodCallers = [];\n\nfunction __emval_call_method(caller, handle, methodName, destructorsRef, args) {\n caller = emval_methodCallers[caller];\n handle = requireHandle(handle);\n methodName = getStringOrSymbol(methodName);\n return caller(handle, methodName, __emval_allocateDestructors(destructorsRef), args);\n}\n\nfunction __emval_call_void_method(caller, handle, methodName, args) {\n caller = emval_methodCallers[caller];\n handle = requireHandle(handle);\n methodName = getStringOrSymbol(methodName);\n caller(handle, methodName, null, args);\n}\n\nfunction __emval_addMethodCaller(caller) {\n var id = emval_methodCallers.length;\n emval_methodCallers.push(caller);\n return id;\n}\n\nfunction __emval_lookupTypes(argCount, argTypes) {\n var a = new Array(argCount);\n for (var i = 0; i < argCount; ++i) {\n  a[i] = requireRegisteredType(HEAP32[(argTypes >> 2) + i], \"parameter \" + i);\n }\n return a;\n}\n\nfunction __emval_get_method_caller(argCount, argTypes) {\n var types = __emval_lookupTypes(argCount, argTypes);\n var retType = types[0];\n var signatureName = retType.name + \"_$\" + types.slice(1).map(function(t) {\n  return t.name;\n }).join(\"_\") + \"$\";\n var params = [ \"retType\" ];\n var args = [ retType ];\n var argsList = \"\";\n for (var i = 0; i < argCount - 1; ++i) {\n  argsList += (i !== 0 ? \", \" : \"\") + \"arg\" + i;\n  params.push(\"argType\" + i);\n  args.push(types[1 + i]);\n }\n var functionName = makeLegalFunctionName(\"methodCaller_\" + signatureName);\n var functionBody = \"return function \" + functionName + \"(handle, name, destructors, args) {\\n\";\n var offset = 0;\n for (var i = 0; i < argCount - 1; ++i) {\n  functionBody += \"    var arg\" + i + \" = argType\" + i + \".readValueFromPointer(args\" + (offset ? \"+\" + offset : \"\") + \");\\n\";\n  offset += types[i + 1][\"argPackAdvance\"];\n }\n functionBody += \"    var rv = handle[name](\" + argsList + \");\\n\";\n for (var i = 0; i < argCount - 1; ++i) {\n  if (types[i + 1][\"deleteObject\"]) {\n   functionBody += \"    argType\" + i + \".deleteObject(arg\" + i + \");\\n\";\n  }\n }\n if (!retType.isVoid) {\n  functionBody += \"    return retType.toWireType(destructors, rv);\\n\";\n }\n functionBody += \"};\\n\";\n params.push(functionBody);\n var invokerFunction = new_(Function, params).apply(null, args);\n return __emval_addMethodCaller(invokerFunction);\n}\n\nfunction __emval_get_module_property(name) {\n name = getStringOrSymbol(name);\n return __emval_register(Module[name]);\n}\n\nfunction __emval_get_property(handle, key) {\n handle = requireHandle(handle);\n key = requireHandle(key);\n return __emval_register(handle[key]);\n}\n\nfunction __emval_incref(handle) {\n if (handle > 4) {\n  emval_handle_array[handle].refcount += 1;\n }\n}\n\nfunction __emval_new_cstring(v) {\n return __emval_register(getStringOrSymbol(v));\n}\n\nfunction __emval_run_destructors(handle) {\n var destructors = emval_handle_array[handle].value;\n runDestructors(destructors);\n __emval_decref(handle);\n}\n\nfunction __emval_take_value(type, argv) {\n type = requireRegisteredType(type, \"_emval_take_value\");\n var v = type[\"readValueFromPointer\"](argv);\n return __emval_register(v);\n}\n\nfunction _abort() {\n abort();\n}\n\nfunction emscripten_realloc_buffer(size) {\n try {\n  wasmMemory.grow(size - buffer.byteLength + 65535 >>> 16);\n  updateGlobalBufferAndViews(wasmMemory.buffer);\n  return 1;\n } catch (e) {}\n}\n\nfunction _emscripten_resize_heap(requestedSize) {\n var oldSize = HEAPU8.length;\n requestedSize = requestedSize >>> 0;\n var maxHeapSize = 2147483648;\n if (requestedSize > maxHeapSize) {\n  return false;\n }\n for (var cutDown = 1; cutDown <= 4; cutDown *= 2) {\n  var overGrownHeapSize = oldSize * (1 + .2 / cutDown);\n  overGrownHeapSize = Math.min(overGrownHeapSize, requestedSize + 100663296);\n  var newSize = Math.min(maxHeapSize, alignUp(Math.max(requestedSize, overGrownHeapSize), 65536));\n  var replacement = emscripten_realloc_buffer(newSize);\n  if (replacement) {\n   return true;\n  }\n }\n return false;\n}\n\nvar SYSCALLS = {\n mappings: {},\n buffers: [ null, [], [] ],\n printChar: function(stream, curr) {\n  var buffer = SYSCALLS.buffers[stream];\n  if (curr === 0 || curr === 10) {\n   (stream === 1 ? out : err)(UTF8ArrayToString(buffer, 0));\n   buffer.length = 0;\n  } else {\n   buffer.push(curr);\n  }\n },\n varargs: undefined,\n get: function() {\n  SYSCALLS.varargs += 4;\n  var ret = HEAP32[SYSCALLS.varargs - 4 >> 2];\n  return ret;\n },\n getStr: function(ptr) {\n  var ret = UTF8ToString(ptr);\n  return ret;\n },\n get64: function(low, high) {\n  return low;\n }\n};\n\nfunction _fd_close(fd) {\n return 0;\n}\n\nfunction _fd_seek(fd, offset_low, offset_high, whence, newOffset) {}\n\nfunction _fd_write(fd, iov, iovcnt, pnum) {\n var num = 0;\n for (var i = 0; i < iovcnt; i++) {\n  var ptr = HEAP32[iov + i * 8 >> 2];\n  var len = HEAP32[iov + (i * 8 + 4) >> 2];\n  for (var j = 0; j < len; j++) {\n   SYSCALLS.printChar(fd, HEAPU8[ptr + j]);\n  }\n  num += len;\n }\n HEAP32[pnum >> 2] = num;\n return 0;\n}\n\nfunction _setTempRet0($i) {\n setTempRet0($i | 0);\n}\n\ninit_emval();\n\nPureVirtualError = Module[\"PureVirtualError\"] = extendError(Error, \"PureVirtualError\");\n\nembind_init_charCodes();\n\ninit_embind();\n\nBindingError = Module[\"BindingError\"] = extendError(Error, \"BindingError\");\n\nInternalError = Module[\"InternalError\"] = extendError(Error, \"InternalError\");\n\ninit_ClassHandle();\n\ninit_RegisteredPointer();\n\nUnboundTypeError = Module[\"UnboundTypeError\"] = extendError(Error, \"UnboundTypeError\");\n\nvar ASSERTIONS = false;\n\nfunction intArrayToString(array) {\n var ret = [];\n for (var i = 0; i < array.length; i++) {\n  var chr = array[i];\n  if (chr > 255) {\n   if (ASSERTIONS) {\n    assert(false, \"Character code \" + chr + \" (\" + String.fromCharCode(chr) + \")  at offset \" + i + \" not in 0x00-0xFF.\");\n   }\n   chr &= 255;\n  }\n  ret.push(String.fromCharCode(chr));\n }\n return ret.join(\"\");\n}\n\nvar decodeBase64 = typeof atob === \"function\" ? atob : function(input) {\n var keyStr = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\";\n var output = \"\";\n var chr1, chr2, chr3;\n var enc1, enc2, enc3, enc4;\n var i = 0;\n input = input.replace(/[^A-Za-z0-9\\+\\/\\=]/g, \"\");\n do {\n  enc1 = keyStr.indexOf(input.charAt(i++));\n  enc2 = keyStr.indexOf(input.charAt(i++));\n  enc3 = keyStr.indexOf(input.charAt(i++));\n  enc4 = keyStr.indexOf(input.charAt(i++));\n  chr1 = enc1 << 2 | enc2 >> 4;\n  chr2 = (enc2 & 15) << 4 | enc3 >> 2;\n  chr3 = (enc3 & 3) << 6 | enc4;\n  output = output + String.fromCharCode(chr1);\n  if (enc3 !== 64) {\n   output = output + String.fromCharCode(chr2);\n  }\n  if (enc4 !== 64) {\n   output = output + String.fromCharCode(chr3);\n  }\n } while (i < input.length);\n return output;\n};\n\nfunction intArrayFromBase64(s) {\n if (typeof ENVIRONMENT_IS_NODE === \"boolean\" && ENVIRONMENT_IS_NODE) {\n  var buf;\n  try {\n   buf = Buffer.from(s, \"base64\");\n  } catch (_) {\n   buf = new Buffer(s, \"base64\");\n  }\n  return new Uint8Array(buf[\"buffer\"], buf[\"byteOffset\"], buf[\"byteLength\"]);\n }\n try {\n  var decoded = decodeBase64(s);\n  var bytes = new Uint8Array(decoded.length);\n  for (var i = 0; i < decoded.length; ++i) {\n   bytes[i] = decoded.charCodeAt(i);\n  }\n  return bytes;\n } catch (_) {\n  throw new Error(\"Converting base64 string to bytes failed.\");\n }\n}\n\nfunction tryParseAsDataURI(filename) {\n if (!isDataURI(filename)) {\n  return;\n }\n return intArrayFromBase64(filename.slice(dataURIPrefix.length));\n}\n\nvar asmLibraryArg = {\n \"n\": __embind_create_inheriting_constructor,\n \"H\": __embind_finalize_value_object,\n \"A\": __embind_register_bool,\n \"c\": __embind_register_class,\n \"i\": __embind_register_class_class_function,\n \"f\": __embind_register_class_class_property,\n \"r\": __embind_register_class_constructor,\n \"a\": __embind_register_class_function,\n \"b\": __embind_register_class_property,\n \"z\": __embind_register_emval,\n \"k\": __embind_register_enum,\n \"j\": __embind_register_enum_value,\n \"p\": __embind_register_float,\n \"K\": __embind_register_function,\n \"h\": __embind_register_integer,\n \"g\": __embind_register_memory_view,\n \"q\": __embind_register_std_string,\n \"m\": __embind_register_std_wstring,\n \"J\": __embind_register_value_object,\n \"I\": __embind_register_value_object_field,\n \"B\": __embind_register_void,\n \"l\": __emval_as,\n \"G\": __emval_call_method,\n \"e\": __emval_call_void_method,\n \"D\": __emval_decref,\n \"d\": __emval_get_method_caller,\n \"L\": __emval_get_module_property,\n \"u\": __emval_get_property,\n \"C\": __emval_incref,\n \"E\": __emval_new_cstring,\n \"F\": __emval_run_destructors,\n \"t\": __emval_take_value,\n \"s\": _abort,\n \"x\": _emscripten_resize_heap,\n \"y\": _fd_close,\n \"v\": _fd_seek,\n \"o\": _fd_write,\n \"w\": _setTempRet0\n};\n\nvar asm = createWasm();\n\nvar ___wasm_call_ctors = Module[\"___wasm_call_ctors\"] = function() {\n return (___wasm_call_ctors = Module[\"___wasm_call_ctors\"] = Module[\"asm\"][\"N\"]).apply(null, arguments);\n};\n\nvar _malloc = Module[\"_malloc\"] = function() {\n return (_malloc = Module[\"_malloc\"] = Module[\"asm\"][\"P\"]).apply(null, arguments);\n};\n\nvar ___getTypeName = Module[\"___getTypeName\"] = function() {\n return (___getTypeName = Module[\"___getTypeName\"] = Module[\"asm\"][\"Q\"]).apply(null, arguments);\n};\n\nvar ___embind_register_native_and_builtin_types = Module[\"___embind_register_native_and_builtin_types\"] = function() {\n return (___embind_register_native_and_builtin_types = Module[\"___embind_register_native_and_builtin_types\"] = Module[\"asm\"][\"R\"]).apply(null, arguments);\n};\n\nvar _free = Module[\"_free\"] = function() {\n return (_free = Module[\"_free\"] = Module[\"asm\"][\"S\"]).apply(null, arguments);\n};\n\nvar dynCall_jiji = Module[\"dynCall_jiji\"] = function() {\n return (dynCall_jiji = Module[\"dynCall_jiji\"] = Module[\"asm\"][\"T\"]).apply(null, arguments);\n};\n\nvar calledRun;\n\nfunction ExitStatus(status) {\n this.name = \"ExitStatus\";\n this.message = \"Program terminated with exit(\" + status + \")\";\n this.status = status;\n}\n\ndependenciesFulfilled = function runCaller() {\n if (!calledRun) run();\n if (!calledRun) dependenciesFulfilled = runCaller;\n};\n\nfunction run(args) {\n args = args || arguments_;\n if (runDependencies > 0) {\n  return;\n }\n preRun();\n if (runDependencies > 0) {\n  return;\n }\n function doRun() {\n  if (calledRun) return;\n  calledRun = true;\n  Module[\"calledRun\"] = true;\n  if (ABORT) return;\n  initRuntime();\n  preMain();\n  readyPromiseResolve(Module);\n  if (Module[\"onRuntimeInitialized\"]) Module[\"onRuntimeInitialized\"]();\n  postRun();\n }\n if (Module[\"setStatus\"]) {\n  Module[\"setStatus\"](\"Running...\");\n  setTimeout(function() {\n   setTimeout(function() {\n    Module[\"setStatus\"](\"\");\n   }, 1);\n   doRun();\n  }, 1);\n } else {\n  doRun();\n }\n}\n\nModule[\"run\"] = run;\n\nif (Module[\"preInit\"]) {\n if (typeof Module[\"preInit\"] == \"function\") Module[\"preInit\"] = [ Module[\"preInit\"] ];\n while (Module[\"preInit\"].length > 0) {\n  Module[\"preInit\"].pop()();\n }\n}\n\nrun();\n\nfunction makeMatrix(m2d) {\n    const m = new DOMMatrix();\n    m.a = m2d.xx;\n    m.b = m2d.xy;\n    m.c = m2d.yx;\n    m.d = m2d.yy;\n    m.e = m2d.tx;\n    m.f = m2d.ty;\n    return m;\n}\n\nModule.onRuntimeInitialized = function () {\n    const {\n        RenderPaintStyle,\n        FillRule,\n        RenderPath,\n        RenderPaint,\n        Renderer,\n        StrokeCap,\n        StrokeJoin,\n        BlendMode\n    } = Module;\n\n    const {\n        fill,\n        stroke\n    } = RenderPaintStyle;\n\n    const {\n        evenOdd,\n        nonZero\n    } = FillRule;\n\n    var CanvasRenderPath = RenderPath.extend(\"CanvasRenderPath\", {\n        __construct: function () {\n            this.__parent.__construct.call(this);\n            this._path2D = new Path2D();\n        },\n        reset: function () {\n            this._path2D = new Path2D();\n        },\n        addPath: function (path, m2d) {\n            this._path2D.addPath(path._path2D, makeMatrix(m2d));\n        },\n        fillRule: function(fillRule) {\n            this._fillRule = fillRule;\n        },\n        moveTo: function (x, y) {\n            this._path2D.moveTo(x, y);\n        },\n        lineTo: function (x, y) {\n            this._path2D.lineTo(x, y);\n        },\n        cubicTo: function (ox, oy, ix, iy, x, y) {\n            this._path2D.bezierCurveTo(ox, oy, ix, iy, x, y);\n        },\n        close: function () {\n            this._path2D.closePath();\n        }\n    });\n\n    function _colorStyle(value) {\n        return 'rgba(' + ((0x00ff0000 & value) >>>\n                16) + ',' + ((0x0000ff00 &\n                value) >>> 8) + ',' + ((0x000000ff & value) >>> 0) + ',' +\n            (((0xff000000 & value) >>> 24) / 0xFF) + ')'\n    }\n    var CanvasRenderPaint = RenderPaint.extend(\"CanvasRenderPaint\", {\n        color: function (value) {\n            this._value = _colorStyle(value);\n        },\n        thickness: function (value) {\n            this._thickness = value;\n        },\n        join: function (value) {\n            switch (value) {\n                case StrokeJoin.miter:\n                    this._join = 'miter';\n                    break;\n                case StrokeJoin.round:\n                    this._join = 'round';\n                    break;\n                case StrokeJoin.bevel:\n                    this._join = 'bevel';\n                    break;\n            }\n        },\n        cap: function (value) {\n            switch (value) {\n                case StrokeCap.butt:\n                    this._cap = 'butt';\n                    break;\n                case StrokeCap.round:\n                    this._cap = 'round';\n                    break;\n                case StrokeCap.square:\n                    this._cap = 'square';\n                    break;\n            }\n        },\n        style: function (value) {\n            this._style = value;\n        },\n        blendMode: function (value) {\n            switch (value) {\n                case BlendMode.srcOver:\n                    this._blend = 'source-over';\n                    break;\n                case BlendMode.screen:\n                    this._blend = 'screen';\n                    break;\n                case BlendMode.overlay:\n                    this._blend = 'overlay';\n                    break;\n                case BlendMode.darken:\n                    this._blend = 'darken';\n                    break;\n                case BlendMode.lighten:\n                    this._blend = 'lighten';\n                    break;\n                case BlendMode.colorDodge:\n                    this._blend = 'color-dodge';\n                    break;\n                case BlendMode.colorBurn:\n                    this._blend = 'color-burn';\n                    break;\n                case BlendMode.hardLight:\n                    this._blend = 'hard-light';\n                    break;\n                case BlendMode.softLight:\n                    this._blend = 'soft-light';\n                    break;\n                case BlendMode.difference:\n                    this._blend = 'difference';\n                    break;\n                case BlendMode.exclusion:\n                    this._blend = 'exclusion';\n                    break;\n                case BlendMode.multiply:\n                    this._blend = 'multiply';\n                    break;\n                case BlendMode.hue:\n                    this._blend = 'hue';\n                    break;\n                case BlendMode.saturation:\n                    this._blend = 'saturation';\n                    break;\n                case BlendMode.color:\n                    this._blend = 'color';\n                    break;\n                case BlendMode.luminosity:\n                    this._blend = 'luminosity';\n                    break;\n            }\n        },\n        linearGradient: function (sx, sy, ex, ey) {\n            this._gradient = {\n                sx,\n                sy,\n                ex,\n                ey,\n                stops: []\n            };\n        },\n        radialGradient: function (sx, sy, ex, ey) {\n            this._gradient = {\n                sx,\n                sy,\n                ex,\n                ey,\n                stops: [],\n                isRadial: true\n            };\n        },\n        addStop: function (color, stop) {\n            this._gradient.stops.push({\n                color,\n                stop\n            });\n        },\n\n        completeGradient: function () {\n\n        },\n\n        draw: function (ctx, path) {\n            let {\n                _style,\n                _value,\n                _gradient,\n                _blend\n            } = this;\n\n            ctx.globalCompositeOperation = _blend;\n\n            if (_gradient != null) {\n                const {\n                    sx,\n                    sy,\n                    ex,\n                    ey,\n                    stops,\n                    isRadial\n                } = _gradient;\n\n                if (isRadial) {\n                    var dx = ex - sx;\n                    var dy = ey - sy;\n                    var radius = Math.sqrt(dx * dx + dy * dy);\n                    _value = ctx.createRadialGradient(sx, sy, 0, sx, sy, radius);\n                } else {\n                    _value = ctx.createLinearGradient(sx, sy, ex, ey);\n                }\n\n                for (const {\n                        stop,\n                        color\n                    } of stops) {\n                    _value.addColorStop(stop, _colorStyle(color));\n                }\n                this._value = _value;\n                this._gradient = null;\n            }\n            switch (_style) {\n                case stroke:\n                    ctx.strokeStyle = _value;\n                    ctx.lineWidth = this._thickness;\n                    ctx.lineCap = this._cap;\n                    ctx.lineJoin = this._join;\n                    ctx.stroke(path._path2D);\n                    break;\n                case fill:\n                    ctx.fillStyle = _value;\n                    ctx.fill(path._path2D, path._fillRule === evenOdd ? 'evenodd' : 'nonzero');\n                    break;\n            }\n        }\n    });\n\n    Module.CanvasRenderer = Renderer.extend(\"Renderer\", {\n        __construct: function (ctx) {\n            this.__parent.__construct.call(this);\n            this._ctx = ctx;\n        },\n        save: function () {\n            this._ctx.save();\n        },\n        restore: function () {\n            this._ctx.restore();\n        },\n        transform: function (matrix) {\n            this._ctx.transform(matrix.xx, matrix.xy, matrix.yx, matrix.yy, matrix.tx,\n                matrix.ty);\n        },\n        drawPath: function (path, paint) {\n            paint.draw(this._ctx, path);\n        },\n        clipPath: function (path) {\n            this._ctx.clip(path._path2D, path._fillRule === evenOdd ? 'evenodd' : 'nonzero');\n        }\n    });\n\n    Module.renderFactory = {\n        makeRenderPaint: function () {\n            return new CanvasRenderPaint();\n        },\n        makeRenderPath: function () {\n            return new CanvasRenderPath();\n        }\n    };\n};\n\n\n  return Rive.ready\n}\n);\n})();\nexport default Rive;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}